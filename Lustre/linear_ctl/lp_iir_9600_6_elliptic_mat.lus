#open "arrays"

const _X = [ [0., 1., 0., 0., 0., 0.],  [0., 0., 1., 0., 0., 0.], [0., 0., 0., 1., 0., 0.], [0., 0., 0., 0., 1., 0.], [0., 0., 0., 0., 0., 1.], [0., 0., 0., 0., 0., 0.] ];
const _X_input = [ [1., 0., 0., 0., 0., 0.] ];

const _Y_X = [ [0.02429729818092203, 0., 0., 0., 0., 0.],  [0.04613413371939573, 0., 0., 0., 0., 0.], [0.05613064430953349, 0., 0., 0., 0., 0.], [0.04613413371939573, 0., 0., 0., 0., 0.], [0.02429729818092203, 0., 0., 0., 0., 0.], [0.0071206017131343335, 0., 0., 0., 0., 0.] ];
const _Y_Y = [ [-2.7445577051566046, 1., 0., 0., 0., 0.],  [4.495158480897364, 0., 1., 0., 0., 0.], [-4.649204375147074, 0., 0., 1., 0., 0.], [3.2299784258838873, 0., 0., 0., 1., 0.], [-1.4088842648092799, 0., 0., 0., 0., 1.], [0.31451868286474205, 0., 0., 0., 0., 0.] ];
const _Y_input = [ [0.0071206017131343335, 0., 0., 0., 0., 0.] ];

node ctl(xn : real^1^1) returns (xnm: real^6^1; ynm:  real^6^1);
let
  assert(xn >= -1.0 and xn <= 1.0);

  ynm = [ [0., 0., 0., 0., 0., 0.] ] -> _MatAdd_real (6, 1,  (_MatMul_real(6, 1, 1, _Y_input,  xn)),  (_MatSub_real (6, 1,  (_MatMul_real (6, 6, 1, _Y_X,  pre xnm)),  _MatMul_real(6, 6, 1, _Y_Y,  pre ynm))));
  xnm = [ [0., 0., 0., 0., 0., 0.] ] -> -- _MatAdd_real (6, 1,  (_MatMul_real (6, 6, 1, _X,  pre xnm)),  
--                                                      _MatMul_real(6, 1, 1, _X_input,  xn)-- );
[ [xn[0][0], 0., 0., 0., 0., 0.] ]
  ;

tel


node top(in0 : real) returns (xn, xnm1, xnm2, xnm3, xnm4, xnm5, ynm1, ynm2, ynm3, ynm4, ynm5, ynm6: real);
var xnm: real^6^1; ynm:  real^6^1;
let
  xnm, ynm = ctl([[in0]]);
  xn = xnm[0][0];
  xnm1 = xnm[0][1];
  xnm2 = xnm[0][2];
  xnm3 = xnm[0][3];
  xnm4 = xnm[0][4];
  xnm5 = xnm[0][5];
 
  ynm1 = ynm[0][0];
  ynm2 = ynm[0][1];
  ynm3 = ynm[0][2];
  ynm4 = ynm[0][3];
  ynm5 = ynm[0][4];
  ynm6 = ynm[0][5];

tel
