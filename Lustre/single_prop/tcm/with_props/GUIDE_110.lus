

node AutoPilot ( HeadMode  : real ; ailStick  : real ; elevStick  : real ; AltMode_Out1_41  : real ; FPAMode_Out1_51  : real ; ATMode_Out1_61  : real ; AltCmd_Out1_71  : real ; Altitude_Out1_81  : real ; CAS_Out1_91  : real ; CASCmdMCP_Out1_101  : real  ) 
   returns ( HeadEng  : bool ; AltEng_In1_1039  : bool ; FPAEng_In1_1051  : bool ; ATEng_In1_1063  : bool ; CASCmd_In1_1075  : real  ) ;
  
let
  -- GUIDE-220
  assert (HeadMode = 0.0) or (not (ailStick = 0.0)) or (not (elevStick = 0.0)) or (HeadEng = true);
tel 




node integrator_reset ( Fx  : real ; ResetLevel  : bool ; x0  : real  ) 
   returns ( out  : real  ) ;
let
  out  = x0 -> if ( ResetLevel  ) then x0 else ( Fx * 1.000000  ) + pre ( out  );
tel 


node ANGL ( in_Out1_76  : real  ) 
   returns ( _180_In1_238  : real  ) ;
var Abs_Out1_79  : real ;
 Relational_Operator_ANGL_Out1_101  : bool ;
 Sum6_Out1_111  : real ;
 Switch1_ANGL_Out1_120  : real ;
 -- sign_Out1_127  : real ;
 times360_Out1_226  : real ;
 Abs_In1_78  : real ;
 Relational_Operator_ANGL_In1_99  : real ;
 Sum6_In1_109  : real ;
 Sum6_In2_110  : real ;
 Switch1_ANGL_In1_117  : real ;
 Switch1_ANGL_In2_118  : bool ;
 Switch1_ANGL_In3_119  : real ;
 sign_In1_126  : real ;
  
let
Abs_Out1_79  = if Abs_In1_78 < 0.000000 then - Abs_In1_78 else Abs_In1_78;
Relational_Operator_ANGL_Out1_101  = Relational_Operator_ANGL_In1_99 > 180.0;
Sum6_Out1_111  = - Sum6_In1_109 + Sum6_In2_110;
Switch1_ANGL_Out1_120  = if Switch1_ANGL_In2_118 then Switch1_ANGL_In1_117 else Switch1_ANGL_In3_119;
-- sign_Out1_127  = ANGL_sign ( sign_In1_126  );
-- times360_Out1_226  = 360.0 *  sign_Out1_127;
times360_Out1_226  = if (sign_In1_126 >= 0.0) then 360.0 else -360.0;
Relational_Operator_ANGL_In1_99  = Abs_Out1_79;
Abs_In1_78  = in_Out1_76;
Switch1_ANGL_In3_119  = in_Out1_76;
Sum6_In2_110  = in_Out1_76;
sign_In1_126  = in_Out1_76;
_180_In1_238  = Switch1_ANGL_Out1_120;
Sum6_In1_109  = times360_Out1_226;
Switch1_ANGL_In1_117  = Sum6_Out1_111;
Switch1_ANGL_In2_118  = Relational_Operator_ANGL_Out1_101;
tel 


node DynamicSaturation ( up_Out1_293  : real ; u_Out1_303  : real ; lo_Out1_313  : real  ) 
   returns ( y1_In1_355  : real  ) ;
   var low_lim  : real ;
let
  y1_In1_355 = if (low_lim <= up_Out1_293) then low_lim else up_Out1_293;
  low_lim = if (lo_Out1_313 >= u_Out1_303) then lo_Out1_313 else u_Out1_303;  
 tel 

node HgdCmdProcessor ( Vt_Out1_19  : real ; HdgCmdMCP_Out1_29  : real ; Heading_Out1_39  : real  ) 
   returns ( HdgCmd_In1_947  : real ; HdgRteCmd_In1_959  : real ; 
   Integrator1 : real ; DynamicSat : real ) ;
var 
 var2zetaOmega_Out1_59  : real ;
 ANGL_Out1_66  : real ;
 DynamicSaturation_Out1_283  : real ;
 Integrator1_Out1_380  : real ;
 Logical_Operator_Out1_385  : bool ;
 Sum2_Out1_489  : real ;
 Sum3_Out1_499  : real ;
 k_Out1_723  : real ;
 k1_Out1_732  : real ;
 omegaSq2_Out1_783  : real ;
 omega_calc_Out1_790  : real ;
 rateLim_calc_Out1_875  : real ;
 times514dot8_Out1_890  : real ;
 Integrator1_1_Out1_598  : real ;
 Logical_Operator1_1_Out1_604  : bool ;
 Logical_Operator1_2_Out1_610  : bool ;
 Logical_Operator1_3_Out1_616  : bool ;
 Relational_Operator_Out1_622  : bool ;
 Relational_Operator1_Out1_628  : bool ;
 Relational_Operator2_Out1_634  : bool ;
 Relational_Operator3_Out1_640  : bool ;
 Switch1_Out1_649  : real ;
 Switch2_Out1_658  : real ;
 Switch3_Out1_667  : real ;
 var2zetaOmega_In1_57  : real ;
 ANGL_In1_65  : real ;
 DynamicSaturation_In1_280  : real ;
 DynamicSaturation_In2_281  : real ;
 DynamicSaturation_In3_282  : real ;
 Integrator1_In1_377  : real ;
 Integrator1_In2_378  : bool ;
 Integrator1_In3_379  : real ;
 Logical_Operator_In1_384  : bool ;
 Sum2_In1_487  : real ;
 Sum2_In2_488  : real ;
 Sum3_In1_497  : real ;
 Sum3_In2_498  : real ;
 k_In1_722  : real ;
 k1_In1_731  : real ;
 omegaSq2_In2_782  : real ;
 Integrator1_1_In1_595  : real ;
 Integrator1_1_In2_596  : bool ;
 -- Integrator1_1_In3_597  : real ;
 Logical_Operator1_1_In1_602  : bool ;
 Logical_Operator1_1_In2_603  : bool ;
 Logical_Operator1_2_In1_608  : bool ;
 Logical_Operator1_2_In2_609  : bool ;
 Logical_Operator1_3_In1_614  : bool ;
 Logical_Operator1_3_In2_615  : bool ;
 Relational_Operator_In1_620  : real ;
 Relational_Operator_In2_621  : real ;
 Relational_Operator1_In1_626  : real ;
 Relational_Operator1_In2_627  : real ;
 Relational_Operator2_In1_632  : real ;
 -- Relational_Operator2_In2_633  : real ;
 Relational_Operator3_In1_638  : real ;
 -- Relational_Operator3_In2_639  : real ;
 Switch1_In1_646  : real ;
 Switch1_In2_647  : bool ;
 Switch1_In3_648  : real ;
 Switch2_In1_655  : real ;
 Switch2_In2_656  : bool ;
 Switch2_In3_657  : real ;
 Switch3_In2_665  : bool ;
 Switch3_In3_666  : real ;
  
let
 var2zetaOmega_Out1_59  = var2zetaOmega_In1_57 * -3.2;

-- I 'sliced' the model (we would need to add simpler versions
-- for the other cases to be complete)
-- ANGL_Out1_66  = ANGL ( ANGL_In1_65  );
ANGL_Out1_66  = ANGL_In1_65;

DynamicSaturation_Out1_283  = DynamicSaturation ( DynamicSaturation_In1_280 , DynamicSaturation_In2_281 , DynamicSaturation_In3_282  );

DynamicSat = ANGL_Out1_66;

Integrator1_Out1_380  = integrator_reset( Integrator1_In1_377 , Integrator1_In2_378 , Integrator1_In3_379);
Logical_Operator_Out1_385  = not Logical_Operator_In1_384;

Sum2_Out1_489  = Sum2_In1_487 + - Sum2_In2_488;
Sum3_Out1_499  = Sum3_In1_497 + - Sum3_In2_498;

k_Out1_723  = - 1.000000 * k_In1_722;
k1_Out1_732  = - 1.000000 * k1_In1_731;
omegaSq2_Out1_783  = 2.56 * omegaSq2_In2_782;

omega_calc_Out1_790  = - 1.6;

-- FALK: fix the constant between 90 and 600.
-- this is the output of ratelim. 
rateLim_calc_Out1_875  = 300.0 * Vt_Out1_19;

-- times block (548 / (Vt * 1.6))
times514dot8_Out1_890  = 305.0 * Vt_Out1_19 ;


Integrator1_1_Out1_598  = integrator_reset ( Integrator1_1_In1_595 , Integrator1_1_In2_596 , 0.000000);
Logical_Operator1_1_Out1_604  = Logical_Operator1_1_In1_602 and Logical_Operator1_1_In2_603;
Logical_Operator1_2_Out1_610  = Logical_Operator1_2_In1_608 and Logical_Operator1_2_In2_609;
Logical_Operator1_3_Out1_616  = Logical_Operator1_3_In1_614 or Logical_Operator1_3_In2_615;
Relational_Operator_Out1_622  = Relational_Operator_In1_620 <= Relational_Operator_In2_621;
Relational_Operator1_Out1_628  = Relational_Operator1_In1_626 >= Relational_Operator1_In2_627;
Relational_Operator2_Out1_634  = Relational_Operator2_In1_632 > 0.000000;
Relational_Operator3_Out1_640  = Relational_Operator3_In1_638 < 0.000000;
Switch1_Out1_649  = if Switch1_In2_647 then Switch1_In1_646 else Switch1_In3_648;
Switch2_Out1_658  = if Switch2_In2_656 then Switch2_In1_655 else Switch2_In3_657;
Switch3_Out1_667  = if Switch3_In2_665 then 0.000000 else Switch3_In3_666;

Sum2_In2_488  = Integrator1_Out1_380;
HdgCmd_In1_947  = Integrator1_Out1_380;
DynamicSaturation_In3_282  = k_Out1_723;
DynamicSaturation_In2_281  = Sum3_Out1_499;
k1_In1_731  = rateLim_calc_Out1_875;
var2zetaOmega_In1_57  = Switch2_Out1_658;
HdgRteCmd_In1_959  = Switch2_Out1_658;
Integrator1_In1_377  = Switch2_Out1_658;
Sum3_In2_498  = var2zetaOmega_Out1_59;
DynamicSaturation_In1_280  = times514dot8_Out1_890;
k_In1_722  = times514dot8_Out1_890;
Sum3_In1_497  = omegaSq2_Out1_783;
ANGL_In1_65  = Sum2_Out1_489;
Logical_Operator_In1_384  = if HdgCmdMCP_Out1_29 = 0.000000 then false else true;
Sum2_In1_487  = HdgCmdMCP_Out1_29;
omegaSq2_In2_782  = ANGL_Out1_66;
Integrator1_In2_378  = Logical_Operator_Out1_385;
Integrator1_In3_379  = Heading_Out1_39;
Relational_Operator1_In1_626  = k1_Out1_732;
Switch2_In1_655  = k1_Out1_732;
Integrator1_1_In2_596  = Logical_Operator_Out1_385;
Switch3_In3_666  = DynamicSaturation_Out1_283;
Relational_Operator3_In1_638  = DynamicSaturation_Out1_283;
Relational_Operator2_In1_632  = DynamicSaturation_Out1_283;
Relational_Operator_In1_620  = rateLim_calc_Out1_875;
Switch1_In1_646  = rateLim_calc_Out1_875;
Logical_Operator1_2_In2_609  = Relational_Operator1_Out1_628;
Switch2_In2_656  = Relational_Operator1_Out1_628;
Switch2_In3_657  = Switch1_Out1_649;
Relational_Operator1_In2_627  = Switch1_Out1_649;
Logical_Operator1_2_In1_608  = Relational_Operator3_Out1_640;
Logical_Operator1_3_In2_615  = Logical_Operator1_2_Out1_610;
Logical_Operator1_3_In1_614  = Logical_Operator1_1_Out1_604;
Switch3_In2_665  = Logical_Operator1_3_Out1_616;
Logical_Operator1_1_In2_603  = Relational_Operator2_Out1_634;
Integrator1_1_In1_595  = Switch3_Out1_667;
Logical_Operator1_1_In1_602  = Relational_Operator_Out1_622;
Switch1_In2_647  = Relational_Operator_Out1_622;
Relational_Operator_In2_621  = Integrator1_1_Out1_598;
Switch1_In3_648  = Integrator1_1_Out1_598;
Integrator1 = Integrator1_1_Out1_598;
 tel 


-- node HeadingControl ( HdgCmdMCP  : real ; Heading  : real ; psidot_Out1_39  : real ; Vt_Out1_49  : real ; Roll  : real ; HeadEng  : bool ; rollLimitinput  : real; right : bool  ) 
--    returns ( RollCmd  : real  ) ;
-- let

--   -- GUIDE-260
--   assert 
--     (HeadEng = false) or
--     (HdgCmdMCP = Heading) or
--     ((right = true)  and ((RollCmd > Roll) or (RollCmd = rollLimitinput))) or
--     ((right = false) and ((RollCmd < Roll) or (RollCmd = -rollLimitinput)));

--  tel
  

node HeadingControl (
  HdgCmdMCP_Out1_19, Heading_Out1_29, psidot_Out1_39,
  Vt_Out1_49, Roll_Out1_59 : real ;
  HeadEng_Out1_69 : bool ;
  rollLimitinput_Out1_79 : real
) returns (RollCmd_In1_1442 : real) ;

var
  HdgCmdProcessor_Out1_88 : real ;
  HdgCmdProcessor_Out2_89 : real ;
  Khdg_Out1_1105 : real ;
  Khdg1_Out1_1114 : real ;
  Khdg2_Out1_1123 : real ;
  Khdgrte_Out1_1132 : real ;
  Logical_Operator_Out1_1137 : bool ;
  Max_Out1_1147 : real ;
  Min_Out1_1157 : real ;
  Mux_Out1_1161_0 : real ;
  Mux_Out1_1161_1 : real ;
  Sum_Out1_1171 : real ;
  Sum1_Out1_1181 : real ;
  Sum2_Out1_1191 : real ;
  Sum3_Out1_1201 : real ;
  Sum4_Out1_1211 : real ;
  -- sgn_Out1_1430 : real ;
  Integrator1_1_Out1_1305 : real ;
  Logical_Operator1_1_Out1_1311 : bool ;
  Logical_Operator1_2_Out1_1317 : bool ;
  Logical_Operator1_3_Out1_1323 : bool ;
  Relational_Operator_Out1_1329 : bool ;
  Relational_Operator1_Out1_1335 : bool ;
  Relational_Operator2_Out1_1341 : bool ;
  Relational_Operator3_Out1_1347 : bool ;
  Switch1_Out1_1356 : real ;
  Switch2_Out1_1365 : real ;
  Switch3_Out1_1374 : real ;
  HdgCmdProcessor_In1_85 : real ;
  HdgCmdProcessor_In2_86 : real ;
  HdgCmdProcessor_In3_87 : real ;
  Khdg_In1_1104 : real ;
  Khdg1_In1_1113 : real ;
  Khdg2_In1_1122 : real ;
  Khdgrte_In1_1131 : real ;
  Logical_Operator_In1_1136 : bool ;
  Max_In1_1145 : real ;
  Max_In2_1146 : real ;
  Min_In1_1155 : real ;
  Min_In2_1156 : real ;
  Mux_In1_1159 : real ;
  Mux_In2_1160 : real ;
  Sum_In1_1169 : real ;
  Sum_In2_1170 : real ;
  Sum1_In1_1179 : real ;
  Sum1_In2_1180 : real ;
  Sum2_In1_1189 : real ;
  Sum2_In2_1190 : real ;
  Sum3_In1_1199 : real ;
  Sum3_In2_1200 : real ;
  Sum4_In1_1209 : real ;
  Sum4_In2_1210 : real ;
  -- sgn_In1_1429 : real ;
  Integrator1_1_In1_1302 : real ;
  Integrator1_1_In2_1303 : bool ;
  Integrator1_1_In3_1304 : real ;
  Logical_Operator1_1_In1_1309 : bool ;
  Logical_Operator1_1_In2_1310 : bool ;
  Logical_Operator1_2_In1_1315 : bool ;
  Logical_Operator1_2_In2_1316 : bool ;
  Logical_Operator1_3_In1_1321 : bool ;
  Logical_Operator1_3_In2_1322 : bool ;
  -- Relational_Operator_In1_1327 : real ;
  Relational_Operator_In2_1328 : real ;
  -- Relational_Operator1_In1_1333 : real ;
  Relational_Operator1_In2_1334 : real ;
  Relational_Operator2_In1_1339 : real ;
  -- Relational_Operator2_In2_1340 : real ;
  Relational_Operator3_In1_1345 : real ;
  -- Relational_Operator3_In2_1346 : real ;
  -- Switch1_In1_1353 : real ;
  Switch1_In2_1354 : bool ;
  Switch1_In3_1355 : real ;
  -- Switch2_In1_1362 : real ;
  Switch2_In2_1363 : bool ;
  Switch2_In3_1364 : real ;
  -- Switch3_In1_1371 : real ;
  Switch3_In2_1372 : bool ;
  Switch3_In3_1373 : real ;
  integrator_out : real ;
let
  HdgCmdProcessor_Out1_88, HdgCmdProcessor_Out2_89 = HgdCmdProcessor(
    HdgCmdProcessor_In1_85, HdgCmdProcessor_In2_86, HdgCmdProcessor_In3_87
  );
  Khdg_Out1_1105 = 0.050000 * Khdg_In1_1104;
  -- Khdg1_Out1_1114 = int_to_real ( 1  ) *Khdg1_In1_1113;
  Khdg1_Out1_1114 = Khdg1_In1_1113;
  -- Khdg2_Out1_1123 = int_to_real ( 1  ) * Khdg2_In1_1122;
  Khdg2_Out1_1123 = Khdg2_In1_1122;
  Khdgrte_Out1_1132 = 3.0 * Khdgrte_In1_1131;
  Logical_Operator_Out1_1137 = not Logical_Operator_In1_1136;
  Max_Out1_1147 =
    if Max_In1_1145 >= Max_In2_1146 then Max_In2_1146 else Max_In1_1145;
  Min_Out1_1157 =
    if Min_In1_1155 <= Min_In2_1156 then Min_In1_1155 else Min_In2_1156;
  -- [ Mux_Out1_1161_0, Mux_Out1_1161_1  ] = [ Mux_In1_1159, Mux_In2_1160  ];
  Mux_Out1_1161_0 = Mux_In1_1159 ;
  Mux_Out1_1161_1 =  Mux_In2_1160 ;  
  Sum_Out1_1171 = Sum_In1_1169 + - Sum_In2_1170;
  Sum1_Out1_1181 = Sum1_In1_1179 + Sum1_In2_1180;
  Sum2_Out1_1191 = Sum2_In1_1189 + - Sum2_In2_1190;
  Sum3_Out1_1201 = - Sum3_In1_1199 + - Sum3_In2_1200;
  Sum4_Out1_1211 = Sum4_In1_1209 + - Sum4_In2_1210;
  -- sgn_Out1_1430 = int_to_real ( - 1  ) * sgn_In1_1429;
  -- sgn_Out1_1430 = - 30.0;
  integrator_out = integrator_reset(
    Integrator1_1_In1_1302, Integrator1_1_In2_1303, Integrator1_1_In3_1304
  );
  Integrator1_1_Out1_1305 = Integrator1_1_In3_1304 -> pre (integrator_out);
  Logical_Operator1_1_Out1_1311 = Logical_Operator1_1_In1_1309 and Logical_Operator1_1_In2_1310;
  Logical_Operator1_2_Out1_1317 = Logical_Operator1_2_In1_1315 and Logical_Operator1_2_In2_1316;
  Logical_Operator1_3_Out1_1323 = Logical_Operator1_3_In1_1321 or Logical_Operator1_3_In2_1322;
  -- Relational_Operator_Out1_1329 = Relational_Operator_In1_1327 <= Relational_Operator_In2_1328;
  Relational_Operator_Out1_1329 =
    rollLimitinput_Out1_79 <= Relational_Operator_In2_1328;
  -- Relational_Operator1_Out1_1335 = Relational_Operator1_In1_1333 >= Relational_Operator1_In2_1334;
  Relational_Operator1_Out1_1335 =
    -rollLimitinput_Out1_79 >= Relational_Operator1_In2_1334;
  -- Relational_Operator2_Out1_1341 = Relational_Operator2_In1_1339 > Relational_Operator2_In2_1340;
  Relational_Operator2_Out1_1341 = Relational_Operator2_In1_1339 > 0.0;
  -- Relational_Operator3_Out1_1347 = Relational_Operator3_In1_1345 < Relational_Operator3_In2_1346;
  Relational_Operator3_Out1_1347 = Relational_Operator3_In1_1345 < 0.0;
  -- Switch1_Out1_1356 = if Switch1_In2_1354 then Switch1_In1_1353 else Switch1_In3_1355;
  Switch1_Out1_1356 =
    if Switch1_In2_1354 then rollLimitinput_Out1_79 else Switch1_In3_1355;
  -- Switch2_Out1_1365 = if Switch2_In2_1363 then Switch2_In1_1362 else Switch2_In3_1364;
  Switch2_Out1_1365 =
    if Switch2_In2_1363 then -rollLimitinput_Out1_79 else Switch2_In3_1364;
  Switch3_Out1_1374 =
    if Switch3_In2_1372 then 0.0 else Switch3_In3_1373;
  HdgCmdProcessor_In3_87 = Heading_Out1_29;
  Sum_In2_1170 = Heading_Out1_29;
  Sum_In1_1169 = HdgCmdProcessor_Out1_88;
  Mux_In2_1160 = HdgCmdProcessor_Out1_88;
  Khdg_In1_1104 = Sum_Out1_1171;
  Sum1_In1_1179 = Khdg_Out1_1105;
  Sum1_In2_1180 = Sum2_Out1_1191;
  Sum2_In1_1189 = HdgCmdProcessor_Out2_89;
  Sum2_In2_1190 = psidot_Out1_39;
  HdgCmdProcessor_In1_85 = Vt_Out1_49;
  HdgCmdProcessor_In2_86 = HdgCmdMCP_Out1_19;
  Mux_In1_1159 = HdgCmdMCP_Out1_19;
  RollCmd_In1_1442 = Switch2_Out1_1365;
  Sum3_In1_1199 = Switch2_Out1_1365;
  Sum4_In2_1210 = Switch2_Out1_1365;
  -- sgn_In1_1429 = 30.0;
  Khdgrte_In1_1131 = Sum1_Out1_1181;
  Min_In1_1155 = Max_Out1_1147;
  Logical_Operator_In1_1136 = HeadEng_Out1_69;
  Khdg1_In1_1113 = Sum3_Out1_1201;
  Khdg2_In1_1122 = Sum4_Out1_1211;
  Max_In2_1146 = Khdg1_Out1_1114;
  Min_In2_1156 = Khdg2_Out1_1123;
  Max_In1_1145 = Khdgrte_Out1_1132;
  Sum3_In2_1200 = rollLimitinput_Out1_79;
  Sum4_In1_1209 = rollLimitinput_Out1_79;
  -- Relational_Operator1_In1_1333 = sgn_Out1_1430;
  -- Switch2_In1_1362 = sgn_Out1_1430;
  -- Relational_Operator1_In1_1333 = -30.0;
  -- Switch2_In1_1362 = -30.0;
  Integrator1_1_In3_1304 = Roll_Out1_59;
  Integrator1_1_In2_1303 = Logical_Operator_Out1_1137;
  Switch3_In3_1373 = Min_Out1_1157;
  Relational_Operator3_In1_1345 = Min_Out1_1157;
  Relational_Operator2_In1_1339 = Min_Out1_1157;
  -- Relational_Operator_In1_1327 = 30.0;
  -- Switch1_In1_1353 =  30.0  ;
  Logical_Operator1_2_In2_1316 = Relational_Operator1_Out1_1335;
  Switch2_In2_1363 = Relational_Operator1_Out1_1335;
  Switch2_In3_1364 = Switch1_Out1_1356;
  Relational_Operator1_In2_1334 = Switch1_Out1_1356;
  -- Relational_Operator3_In2_1346 = 0.0 ;
  Logical_Operator1_2_In1_1315 = Relational_Operator3_Out1_1347;
  Logical_Operator1_3_In2_1322 = Logical_Operator1_2_Out1_1317;
  Logical_Operator1_3_In1_1321 = Logical_Operator1_1_Out1_1311;
  Switch3_In2_1372 = Logical_Operator1_3_Out1_1323;
  Logical_Operator1_1_In2_1310 = Relational_Operator2_Out1_1341;
  -- Relational_Operator2_In2_1340 = 0.0;
  -- Switch3_In1_1371 = 0.0 ;
  Integrator1_1_In1_1302 = Switch3_Out1_1374;
  Logical_Operator1_1_In1_1309 = Relational_Operator_Out1_1329;
  Switch1_In2_1354 = Relational_Operator_Out1_1329;
  Relational_Operator_In2_1328 = Integrator1_1_Out1_1305;
  Switch1_In3_1355 = Integrator1_1_Out1_1305;
tel



node top(HeadMode: real ; ailStick: real ; elevStick : real ; AltMode : real ; FPAMode : real ; ATMode : real ; AltCmd : real ; Altitude  : real ; CAS : real ; CASCmdMCP : real; HdgCmdMCP: real ; Heading : real ; psidot : real ; Vt : real ; Roll : real ; rollLimitInput : real) returns (obs : bool);
var 
    HeadEng  : bool ; 
    AltEng : bool; 
    FPAEng  : bool ; 
    ATEng  : bool ; 
    CASCmd  : real;
    RollCmd : real;
    right : bool;
let
   HeadEng, AltEng, FPAEng, ATEng, CASCmd= AutoPilot ( HeadMode,  ailStick, elevStick,  AltMode, FPAMode, ATMode, AltCmd, Altitude, CAS, CASCmdMCP);

   RollCmd =  HeadingControl ( HdgCmdMCP , Heading , psidot , Vt , Roll , HeadEng , rollLimitInput, right);

   assert (not (HeadMode = 0.0));
   assert (ailStick = 0.0);  
   assert (elevStick = 0.0); 
   assert (Heading >= 0) and (Heading < 360); 
   assert (HdgCmdMCP >= 0) and (HdgCmdMCP < 360); 
   assert (rollLimitInput > 0) and (rollLimitInput <= 30);

   right = ((HdgCmdMCP - Heading > 0) and (HdgCmdMCP - Heading < 180)) or (Heading - HdgCmdMCP > 180);

   obs  =  (HdgCmdMCP = Heading) or
     ((right = true)  and ((RollCmd > Roll) or (RollCmd = rollLimitInput))) or
     ((right = false) and ((RollCmd < Roll) or (RollCmd = -rollLimitInput)));

  --!MAIN : true;
  --!PROPERTY: obs = true;
tel