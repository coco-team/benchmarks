node main(
  clear : bool;
  kp_0 : bool;
  kp_1 : bool;
  kp_2 : bool;
  kp_3 : bool;
  kp_4 : bool;
  kp_5 : bool;
  kp_6 : bool;
  kp_7 : bool;
  kp_8 : bool;
  kp_9 : bool;
  cooking_mode : int;
  foo : bool;
  kp_digit : int;
  eq_secs : int;
  digit_registered : bool;
  prev_at_zero : bool;
  right_eq : int;
  right_carry : bool;
  middle_eq : int;
  middle_carry : bool;
  left_eq : int;
  left_carry : bool;
  kp_0_pressed : bool;
  kp_1_pressed : bool;
  kp_2_pressed : bool;
  kp_3_pressed : bool;
  kp_4_pressed : bool;
  kp_5_pressed : bool;
  kp_6_pressed : bool;
  kp_7_pressed : bool;
  kp_8_pressed : bool;
  kp_9_pressed : bool;
  clear_pressed : bool;
  keypad_enabled : bool;
  any_digit_pressed : bool;
  left_digit : int;
  middle_digit : int;
  right_digit : int;
  seconds_to_cook : int
) returns (

);
var
  __GUARANTEE1 : bool;
let
  --%MAIN;
  __GUARANTEE1 = ((middle_digit >= 0) and (middle_digit <= 9));

  assert (left_digit = left_eq);

  assert (middle_digit = middle_eq);

  assert (right_digit = right_eq);

  assert (seconds_to_cook = eq_secs);

  assert (foo = false);

  assert (kp_digit = (if kp_0_pressed then 0 else (if kp_1_pressed then 1 else (if kp_2_pressed then 2 else (if kp_3_pressed then 3 else (if kp_4_pressed then 4 else (if kp_5_pressed then 5 else (if kp_6_pressed then 6 else (if kp_7_pressed then 7 else (if kp_8_pressed then 8 else (if kp_9_pressed then 9 else 0)))))))))));

  assert (eq_secs = (((left_digit * 60) + (middle_digit * 10)) + right_digit));

  assert (digit_registered = (any_digit_pressed and (not clear_pressed)));

  assert (prev_at_zero = (true -> (pre (seconds_to_cook = 0))));

  assert ((right_eq, right_carry) = Microwave_SEng5861__Display_Control__Impl__update_digit(9, cooking_mode, kp_digit, true, any_digit_pressed, clear_pressed, prev_at_zero));

  assert ((middle_eq, middle_carry) = Microwave_SEng5861__Display_Control__Impl__update_digit(5, cooking_mode, (0 -> (pre right_eq)), right_carry, any_digit_pressed, clear_pressed, prev_at_zero));

  assert ((left_eq, left_carry) = Microwave_SEng5861__Display_Control__Impl__update_digit(9, cooking_mode, (0 -> (pre middle_eq)), middle_carry, any_digit_pressed, clear_pressed, prev_at_zero));

  assert (kp_0_pressed = defs__rising_edge(kp_0));

  assert (kp_1_pressed = defs__rising_edge(kp_1));

  assert (kp_2_pressed = defs__rising_edge(kp_2));

  assert (kp_3_pressed = defs__rising_edge(kp_3));

  assert (kp_4_pressed = defs__rising_edge(kp_4));

  assert (kp_5_pressed = defs__rising_edge(kp_5));

  assert (kp_6_pressed = defs__rising_edge(kp_6));

  assert (kp_7_pressed = defs__rising_edge(kp_7));

  assert (kp_8_pressed = defs__rising_edge(kp_8));

  assert (kp_9_pressed = defs__rising_edge(kp_9));

  assert (clear_pressed = defs__rising_edge(clear));

  assert (keypad_enabled = defs__is_setup(cooking_mode));

  assert (any_digit_pressed = (((((((((kp_1_pressed or kp_2_pressed) or kp_3_pressed) or kp_4_pressed) or kp_5_pressed) or kp_6_pressed) or kp_7_pressed) or kp_8_pressed) or kp_9_pressed) or kp_0_pressed));

  assert true;

  --%PROPERTY __GUARANTEE1;

tel;

node defs__is_cooking(
  m : int
) returns (
  _outvar : bool
);
let
  _outvar = (m = 3);

tel;

node defs__is_setup(
  m : int
) returns (
  _outvar : bool
);
let
  _outvar = (m = 1);

tel;

node Microwave_SEng5861__Display_Control__Impl__update_digit(
  carry_value : int;
  mode : int;
  prev_right : int;
  carry_in : bool;
  digit_pressed : bool;
  clear_pressed : bool;
  prev_at_zero : bool
) returns (
  digit : int;
  carry_out : bool
);
let
  digit = (0 -> (if defs__is_cooking(mode) then (if prev_at_zero then 0 else (if carry_in then (if ((pre digit) = 0) then carry_value else ((pre digit) - 1)) else (pre digit))) else (if defs__is_setup(mode) then (if clear_pressed then 0 else (if digit_pressed then prev_right else (pre digit))) else (pre digit))));

  carry_out = (false -> ((digit = carry_value) and (pre (digit = 0))));

tel;

node defs__initially_true(
  b : bool
) returns (
  result : bool
);
let
  result = (b -> (pre true));

tel;

node defs__rising_edge(
  signal : bool
) returns (
  re : bool
);
let
  re = (signal and (not (false -> (pre signal))));

tel;

