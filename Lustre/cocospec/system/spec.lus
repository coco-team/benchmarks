(* Threshold on the altitude gap for Guide 210 and 170/180. *)
const altitude_gap_threshold = 200.0 ;










(* Contract for `MODE_LOGIC_HeadingMode`. *)
contract logic_heading(
  in_engage, in_disengage: bool
) returns (
  out_engaged: bool
) ;
let
  var head_deactivation: bool = false -> pre in_disengage ;
  (* Head requested and no deactivation since then. *)
  var head_req: bool = has_been_true_reset(
    in_engage, head_deactivation and not in_engage
  ) ;

  (* System does not behave well when inputs rise and fall change value too
  fast. The assumptions that follow say that when an input changes value, it
  keeps the new value for at least two steps. *)
  assume true -> (
    since(in_engage) = 1 => pre since(not in_engage) > 1
  ) ;
  assume true -> (
    since(not in_engage) = 1 => pre since(in_engage) > 1
  ) ;
  assume true -> (
    since(in_disengage) = 1 => pre since (not in_disengage) > 1
  ) ;
  assume true -> (
    since(not in_disengage) = 1 => pre since (in_disengage) > 1
  ) ;

  (* System does not behave well when an both inputs fall at the same time. *)
  assume not ( fall(in_engage) and fall(in_disengage) ) ;

  (* Not asked to engage yet. *)
  mode init (
    require duration(not in_engage) > 0 ;
    ensure  not out_engaged ;
  ) ;

  (* Asked to engage in the past, but disengaged now. *)
  mode deactivating (
    (* No collision with init mode. *)
    require not ::init ;
    require not head_req ;
    require not in_engage ;
    ensure  not out_engaged ;
  ) ;

  mode engaged (
    require head_req ;
    ensure  out_engaged ;
  ) ;
tel













(* Contract for `MODE_LOGIC_AltAndFPAMode`. *)
contract logic_alt_fpa(
  in_alt_engage, in_fpa_engage, in_disengage: bool ;
  altitude, altitude_target: real
) returns (
  out_alt_engaged, out_fpa_engaged: bool
) ;
let
  var deactivation: bool = false -> pre in_disengage ;

  (* Alt requested and no deactivation since then. *)
  var alt_requested: bool = has_been_true_reset(
    in_alt_engage, deactivation and not in_alt_engage
  ) ;
  (* FPA requested and no deactivation since then. *)
  var fpa_requested: bool = has_been_true_reset(
    in_fpa_engage, deactivation and not in_fpa_engage
  ) ;

  (* Separates Guide 210 (`tiny_altitude_gap`) from Guide 170/180
  (`wide_altitude_gap`). In the former altitude has priority, while in the
  latter it's FPA. *)
  var wide_altitude_gap: bool = abs(
    altitude - altitude_target
  ) > altitude_gap_threshold ;
  var tiny_altitude_gap: bool = not wide_altitude_gap ;

  (* The following assumptions say that [alt_eng_in], [fpa_eng_in] and
  [deactivation] cannot change too fast. It can only change from [v] to [not v]
  if it had value [v] for at least two steps.

  The system remembers which mode were requested since the last deactivation
  and activates whoever has priority, depending on the width of the gap between
  the actual altitude and the altitude command.

  But it seems a request is only remembered if it lasts for more than one
  cycle. My understanding is that in this case, the relevant mode is still
  activated for this one cycle, but that's all.

  I tried to specify the system for this behavior, and it worked to some
  extent, but the spec was way messier. More importantly, when there are
  alternations of one-cycle-long requests for Alt and FPA the system just stops
  making any sense to me. I might be missing something, but when in addition
  [deactivation] is allowed to spike for a single cycle, it becomes a
  nightmare.

  Example of very confusing trace:
  Node MODE_LOGIC_AltAndFPAMode ()
   == Inputs ==
   ActiavteFPA_1_1                               0     0     0     0     0
   Deactivate_1_1                             true  true false false false
   Altitude_1_1                                201  -201    -1     0   201
   AltCmd_1_1                                    0     0     0   200     0
   ActiavteAlt_1_1                               0     0     6     0     0
   == Outputs ==
   AltEng_1_1                                false false  true false  true
   FPAEng_2_1                                false false false false false

  Notice that there's an Alt request in step 3 that's not confirmed so Alt is
  active in step 3 but not step 4. However for some reason it is activated
  again in step 5 even though there's no request at all... *)
  assume true -> (
    since(    in_alt_engage) = 1 => pre since(not in_alt_engage) > 1
  ) ;
  assume true -> (
    since(not in_alt_engage) = 1 => pre since(    in_alt_engage) > 1
  ) ;
  assume true -> (
    since(    in_fpa_engage) = 1 => pre since(not in_fpa_engage) > 1
  ) ;
  assume true -> (
    since(not in_fpa_engage) = 1 => pre since(    in_fpa_engage) > 1
  ) ;
  assume true -> (
    since(    in_disengage ) = 1 => pre since(not in_disengage ) > 1
  ) ;
  assume true -> (
    since(not in_disengage ) = 1 => pre since(    in_disengage ) > 1
  ) ;

  (* System does not behave well when two signals fall at the same time. *)
  assume fall(in_alt_engage) => not fall(in_disengage) ;
  assume fall(in_fpa_engage) => not fall(in_disengage) ;

  (* Whatever happens, altitude control and PFA control can't be active at the
  same time. *)
  guarantee not (out_alt_engaged and out_fpa_engaged) ;

  (* Nothing happened so far. *)
  mode init (
    require duration( not (in_alt_engage or in_fpa_engage) ) > 0 ;
    (* Neither alt or FPA is active. *)
    ensure not (out_alt_engaged or out_fpa_engaged) ;
  ) ;

  (* Asked to engage in the past but disengaged now. *)
  mode disengaged (
    (* No collision with inactive mode. *)
    require not ::init ;
    require not alt_requested ;
    require not fpa_requested ;
    (* Neither alt or FPA is active. *)
    ensure  not (out_alt_engaged or out_fpa_engaged) ;
  ) ;

  (* |===| Guide 170.
  Altitude does not have priority. It cannot be active if FPA was requested
  since the beginning / last deactivation, or if a deactivation happened since
  the last request for altitude. *)
  mode alt_wag_170 (
    require wide_altitude_gap ;
    require alt_requested ;
    require not fpa_requested ;
    (* Altitude is engaged. *)
    ensure  out_alt_engaged ;
  ) ;

  (* |===| Guide 180.
  FPA has priority. It is active if no deactivation happened since the last FPA
  request. *)
  mode fpa_wag_180 (
    require wide_altitude_gap ;
    require fpa_requested ;
    (* FPA is engaged. *)
    ensure  out_fpa_engaged ;
  ) ;

  (* |===| Guide 210, fpa mode.
  FPA does not have priority. It cannot be active if altitude was requested
  since the beginning / last deactivation, or if a deactivation happened since
  the last request for FPA. *)
  mode fpa_tag_210 (
    require tiny_altitude_gap ;
    require fpa_requested ;
    require not alt_requested ;
    (* FPA is active. *)
    ensure  out_fpa_engaged ;
  ) ;

  (* |===| Guide 210, altitude mode.
  Altitude has priority. It is active if no deactivation happened since the
  last altitude request. *)
  mode alt_tag_210 (
    require tiny_altitude_gap ;
    require alt_requested ;
    (* Altitude is active. *)
    ensure  out_alt_engaged ;
  ) ;

tel










(* Contract for `MODE_LOGIC`.
Gathers `logic_heading` and `logic_alt_fpa`. *)
contract logic (
  in_head_engage, in_alt_engage, in_fpa_engage, in_disengage: bool ;
  in_alt, in_alt_target: real
) returns (
  out_head_engaged, out_alt_engaged, out_fpa_engaged: bool
) ;
let
  import logic_heading (
    in_head_engage, in_disengage
  ) returns (
    out_head_engaged
  ) ;
  import logic_alt_fpa (
    in_alt_engage, in_fpa_engage, in_disengage, in_alt, in_alt_target
  ) returns (
    out_alt_engaged, out_fpa_engaged
  ) ;
tel







(* Contract for `LONGITUDINAL_CONTROLLER_FPAControl`. *)
contract fpa (
  in_engaged: bool ;
  in_fpa, in_fpa_target, in_pitch, in_speed: real
) returns (
  out_pitch: real
) ;
let
  var pre_in_fpa_target: real = in_fpa_target -> pre in_fpa_target ;
  var pre_out_pitch: real = out_pitch -> pre out_pitch ;

  (* True if the fpa target hasn't changed. *)
  var cmd_stable: bool = true -> in_fpa_target = pre in_fpa_target ;
  var pitch_diff_ubound: real = 4.83 * 57.2958 * 1.6878 * in_speed ;
  var safe_pitch_diff: real = (
    if in_fpa_target - in_fpa > pitch_diff_ubound
    then pitch_diff_ubound
    else if in_fpa_target - in_fpa < - pitch_diff_ubound
    then - pitch_diff_ubound
    else in_fpa_target - in_fpa
  ) ;

  (* Rising means that the pitch command is above the current pitch, or above
  its previous value, or that FPA is expected to reach / go above the FPA
  target in the next step. *)
  var rising: bool =
    out_pitch > in_pitch or
    out_pitch >= pre_out_pitch or
    in_fpa_target <= in_fpa + ( 0.0 -> (in_fpa - pre in_fpa) ) ;

  (* Lowering means that the pitch command is below the current pitch, or below
  its previous value, or that FPA is expected to reach / go below the FPA
  target in the next step. *)
  var lowering: bool =
    out_pitch < in_pitch or
    out_pitch <= pre_out_pitch or
    in_fpa_target >= in_fpa + ( 0.0 -> (in_fpa - pre in_fpa) ) ;

  (* Speed is positive. *)
  assume in_speed >= 0.0 ;

  (* We're not engaged initially. *)
  -- assume not in_engaged -> true ;
  (* We start with pitch and FPA at 0. *)
  -- assume in_pitch = 0.0 -> true ;
  -- assume in_fpa = 0.0 -> true ;


  (* ## Pseudo-closed-loop assumptions. *)

  (* Pitch cannot change too fast. *)
  -- assume PseudoContinuous(in_pitch, 1.0) ;
  (* Neither can FPA. *)
  -- assume PseudoContinuous(in_fpa, 1.0) ;
  (* Neither can FPA command. *)
  -- assume PseudoContinuous(in_fpa_target, 1.0) ;
  (* Pitch command is immediate when we're engaged. *)
  -- assume true -> (
  --   in_engaged and pre in_engaged => in_pitch = pre out_pitch
  -- ) ;
  (* Super strong relation between pitch and FPA. *)
  -- assume in_pitch = 1.4 * in_fpa ;

  (* Pitch converges towards pitch command. Ideally we want this and not the
  previous one. *)
  assume true -> (
    pre in_engaged => (
      abs( 0.0 -> (in_pitch - pre out_pitch) ) <=
      abs( 0.0 -> (pre in_pitch - pre out_pitch) )
      -- or (pre in_pitch) = pre out_pitch
    )
  ) ;

  (* Link between pitch and FPA. *)
  (* FPA and theta have same sign, and abs(fpa) < (theta). *)
--   assume (in_pitch = 0.0 => in_fpa = 0.0) ;
--   assume true -> (
--     in_pitch > 0.0 => (
--       in_pitch > in_fpa and in_fpa >= in_pitch / 1.4
--     )
--   ) ;
--   assume true -> (
--     in_pitch < 0.0 => (
--       in_pitch / 1.4 >= in_fpa and in_fpa > in_pitch
--     )
--   ) ;
  (* Derivatives of FPA and pitch have the same sign. *)
  assume true -> ( (in_pitch > pre in_pitch) = (in_fpa > pre in_fpa) ) ;
  assume true -> ( (in_pitch < pre in_pitch) = (in_fpa < pre in_fpa) ) ;
  assume true -> ( (in_pitch = pre in_pitch) = (in_fpa = pre in_fpa) ) ;


  (* Cannot be engaged if speed is less than 100. *)
  assume in_speed < 100.0 => not in_engaged ;
  (* When engaging actual FPA and command must match. *)
  -- assume true -> (
  --   rise(in_engaged) => (
  --     abs(in_fpa - in_fpa_target) < 0.001
  --   )
  -- ) ;


  (* |===| "Pitch command clamped by aircraft limitations." Probably.
    Constants come from the system, no idea what they mean.

    System acts weird when fpa_eng_in_in is true in the initial state. We thus
    request that at least a deactivation occured. *)
  -- guarantee (true -> has_been_true(not engaged)) => (
  --   engaged =>
  --     abs(in_pitch - out_pitch) <= 4.83 * 57.2958 * 1.6878 * in_speed
  -- ) ;


  (* |===| Modes. *)

  -- (* Inhibited. *)
  -- mode inhibited (
  --   require in_hibit ;
  -- ) ;

  (* Not activated. Seems to me the ensure here should be that
  out_pitch = in_pitch. *)
  mode fpa_deactivated (
--     require not ::inhibited ;
    require not in_engaged ;
    ensure true -> (
      (has_been_true(in_engaged) and pre not in_engaged) => (
        out_pitch = (
          pre (safe_pitch_diff + in_pitch + 1.4 * in_fpa)
        ) - 1.4 * in_fpa
      )
    ) ;
  ) ;

  mode fpa_fpa_engaging (
    -- require not ::inhibited ;
    require in_engaged -> rise(in_engaged) ;
  ) ;

  (* |===| Guide 120/130, rising. *)
  mode fpa_g120_130_rising (
    -- require not ::inhibited ;
    require in_engaged ;
    require false -> pre in_engaged ;
    require in_fpa_target > in_fpa ;
    ensure (
      (* Not confirmed that we're climbing. *)
      (false -> pre (in_fpa_target <= in_fpa)) or
      (* Pitch was at pitch command. *)
      (false -> pre (in_pitch = out_pitch)) or
      (* Climbing. *)
      rising or
      (* We're not climbing but we were in the previous state. *)
      ( not rising and (false -> pre rising) )
    ) ;
  ) ;

  (* |===| Guide 120/130, lowering. *)
  mode fpa_g120_130_lowering (
    -- require not ::inhibited ;
    require in_engaged ;
    require false -> pre in_engaged ;
    require in_fpa_target < in_fpa ;
    ensure (
      (* Not confirmed that we're descending. *)
      (false -> pre (in_fpa_target >= in_fpa)) or
      (* Pitch was at pitch command. *)
      (false -> pre (in_pitch = out_pitch)) or
      (* descending. *)
      lowering or
      (* We're not descending but we were in the previous state. *)
      ( not lowering and (false -> pre lowering) )
    ) ;
  ) ;

  (* |===| Guide 120/130, stabilizing version.
    Things get tricky when we get to the requested FPA. Not sure what the
    ensure should be here. This mode cannot be active for two consecutive
    states though because of `count_succ_true(...) = 1` unless the command
    changes. *)
  mode fpa_g120_130_stabilizing (
    -- require not ::inhibited ;
    require in_engaged ;
    require (
      (not cmd_stable) or
      -- (false -> not pre in_engaged) or
      (false -> (in_fpa_target < in_fpa <> pre (in_fpa_target < in_fpa))) or
      (false -> (in_fpa_target > in_fpa <> pre (in_fpa_target > in_fpa))) or
      count_succ_true(in_fpa_target = in_fpa) = 1
    ) ;
  ) ;

  (* |===| Guide 120, stable version. *)
  mode fpa_g120_130_stable (
    require not ::fpa_fpa_engaging ;
    require count_succ_true(in_engaged) >= 2 ;
    require count_succ_true(in_fpa_target = in_fpa) >= 2 ;
    require cmd_stable ;
    ensure (
      out_pitch = in_pitch
      -- ( (next_fpa < in_fpa_target) and (pitch > in_fpa_target) ) or
      -- ( (next_fpa > in_fpa_target) and (pitch < in_fpa_target) ) or
      -- duration(true) < 3
    ) ;
  ) ;


tel













(* Contract for `LONGITUDINAL_CONTROLLER_AltitudeControl`. *)
contract alt(
  in_hibit, in_engaged: bool ;
  in_alt, in_alt_target, in_gskts, in_hdot: real
) returns (
  out_alt: real
) ;
let
  (* Forcing continuity over the altitude and its derivative. *)
  assume PseudoContinuous(in_alt, 1.0) ;
  assume PseudoContinuous(in_hdot, 1.0) ;

  (* Forcing the semantics of `hdot`, derivative of the altitude. *)
  assume true -> in_alt = in_hdot + pre in_alt ;

  mode inhibited (
    require in_hibit ;
  ) ;

  mode alt_disengaged_slow (
    require not ::inhibited ;
    require not in_engaged ;
    require in_gskts < 100.0 ;
  ) ;

  mode alt_disengaged_fast (
    require not ::inhibited ;
    require not in_engaged ;
    require not ::alt_disengaged_slow ;
    (* O.34 > 57.2958 / (1.6878 * 100), where 100 is the lower bound of
    gskts_in. *)
    ensure  true -> (
      (pre not in_engaged) => (
        out_alt <= (3.2 + pre in_hdot) * 0.34
      )
    ) ;
    ensure true -> (
      (pre not in_engaged) => (
        out_alt >= (- 3.2 + pre in_hdot) * 0.34
      )
    ) ;
  ) ;

  (* Engaged, unspecified for now. *)
  mode alt_engaged (
    require not ::inhibited ;
    require in_engaged ;
  ) ;
tel




(* Maximum CAS value for which controllers are active. *)
const max_cas = 500.0 ;


(* Contract for `LONGITUDINAL_CONTROLLER`. *)
contract longitudinal (
  in_alt_engaged, in_fpa_engaged: bool ;
  in_alt, in_alt_target, in_hdot,
  in_fpa, in_fpa_target,
  in_pitch,
  in_speed,
  in_gskts,
  in_cas,
  in_elev: real
) returns (
  out_alt, out_pitch, out_elev: real
) ;
let

  var pre_out_pitch: real = out_pitch -> pre out_pitch ;

  var fpa_target_stable: bool = true -> in_fpa_target = pre in_fpa_target ;

  var fpa_tgt_delta_lb: real = 0.0 -> (-3.2 + pre in_hdot) * 0.34 ;
  var fpa_tgt_delta_ub: real = 0.0 -> ( 3.2 + pre in_hdot) * 0.34 ;
  var fpa_tgt_lb: real = in_fpa_target + fpa_tgt_delta_lb ;
  var fpa_tgt_ub: real = in_fpa_target + fpa_tgt_delta_ub ;
  -- var fpa_tgt_delta = abs(0.0 -> ( 3.2 + pre in_hdot) * 0.34) ;
  -- var fpa_tgt_lb = in_fpa_target - fpa_tgt_delta ;
  -- var fpa_tgt_ub = in_fpa_target + fpa_tgt_delta ;

  var rising: bool = 
    out_pitch > in_pitch or
    out_pitch >= pre_out_pitch or
    fpa_tgt_lb <= in_fpa + (0.0 -> in_fpa - pre in_fpa) ;

  var lowering: bool =
    out_pitch < in_pitch or
    out_pitch <= pre_out_pitch or
    fpa_tgt_ub >= in_fpa + (0.0 -> in_fpa - pre in_fpa) ;

  (* All speed inputs are positive. *)
  assume in_speed >= 0.0 ;
  assume in_gskts >= 0.0 ;
  assume in_cas   >= 0.0 ;

  assume PseudoContinuous(in_alt,   1.0) ;
  assume PseudoContinuous(in_hdot,  1.0) ;
  assume PseudoContinuous(in_speed, 1.0) ;
  assume PseudoContinuous(in_gskts, 1.0) ;
  assume PseudoContinuous(in_cas,   1.0) ;

  assume true -> in_alt = in_hdot + pre in_alt ;

  (* Cannot be engaged if speed is less than 100. *)
  assume (in_fpa_engaged or in_alt_engaged) => in_speed >= 100.0 ;
  assume (in_fpa_engaged or in_alt_engaged) => in_gskts >= 100.0 ;
  assume (in_fpa_engaged or in_alt_engaged) => in_cas   >= 100.0 ;
  assume (in_fpa_engaged or in_alt_engaged) => in_alt_target >= 0.0 ;
  assume (in_fpa_engaged or in_alt_engaged) => in_fpa_target = 0.0 ;

  -- assume in_fpa_engaged ;
  -- assume in_alt > 100.0 ;

  (* FPA and altitude cannot be engaged at the same time. *)
  assume not (in_fpa_engaged and in_alt_engaged) ;

  assume fall(in_alt_engaged) => not in_fpa_engaged ;

  assume true -> (
    ( (in_pitch > pre in_pitch) = (in_fpa > pre in_fpa) ) and
    ( (in_pitch < pre in_pitch) = (in_fpa < pre in_fpa) ) and
    ( (in_pitch = pre in_pitch) = (in_fpa = pre in_fpa) )
  ) ;

  assume true -> (
    pre in_fpa_engaged => (
      abs( 0.0 -> (in_pitch - pre out_pitch) ) <=
      abs( 0.0 -> pre (in_pitch - out_pitch) )
      -- or (pre in_pitch) = pre out_pitch
    )
  ) ;

  mode always_true (
    require true ;
  ) ;

  (* Elevation stick bypasses everything. *)
  mode manual_override (
    require in_elev <> 0.0 ;
    ensure out_elev = in_elev ;
  ) ;

  (* If CAS is above 500 and there's no manual overrid, output is zero. *)
  mode too_fast (
    require not ::manual_override ;
    require in_cas > max_cas ;
    ensure  out_elev = 0.0 ;
  ) ;

  (* Disengaged, no manual override, not too fast. *)
  mode disengaged (
    require not ::manual_override ;
    require not ::too_fast ;
    require not in_fpa_engaged ;
    require not in_alt_engaged ;
    ensure  out_elev = 0.0 ;
  ) ;

  mode alt_engaged (
    require not ::manual_override ;
    require not ::too_fast ;
    require in_alt_engaged ;
  ) ;

  mode fpa_engaging (
    require not ::manual_override ;
    require not ::too_fast ;
    require in_fpa_engaged -> rise(in_fpa_engaged) ;
  ) ;

  (* |===| Guide 120/130, rising. *)
  mode fpa_g120_130_rising (
    require not ::manual_override ;
    require not ::too_fast ;
    require in_fpa_engaged ;
    require false -> pre in_fpa_engaged ;
    require (
      (* (-3.2 + pre hdot_in) * 0.34 is the lower bound on alt_cmd_out when alt
        is not engaged. *)
      fpa_tgt_lb > in_fpa
    ) ;
    ensure (
      (* Not confirmed that we're rising. *)
      (false -> pre (fpa_tgt_lb <= in_fpa)) or
      (* Pitch was at pitch command. *)
      (false -> pre (in_pitch = out_pitch)) or
      (* Rising. *)
      rising or
      (* We're not rising but we were in the previous state. *)
      (false -> pre rising)
    ) ;
  ) ;

  (* |===| Guide 120/130, lowering. *)
  mode fpa_g120_130_lowering (
    require not ::manual_override ;
    require not ::too_fast ;
    require in_fpa_engaged ;
    require false -> pre in_fpa_engaged ;
    require (
      (* (+3.2 + pre hdot_in) * 0.34 is the lower bound on alt_cmd_out when alt
        is not engaged. *)
      fpa_tgt_ub < in_fpa
    ) ;
    ensure (
      (* Not confirmed that we're lowering. *)
      (false -> pre (fpa_tgt_ub >= in_fpa)) or
      (* Pitch was at pitch command. *)
      (false -> pre (in_pitch = out_pitch)) or
      (* lowering. *)
      lowering or
      (* We're not lowering but we were in the previous state. *)
      (false -> pre lowering)
    ) ;
  ) ;

  (* |===| Guide 120_130, stabilizing version.
   Things get tricky when we get to the requested FPA.
   Not sure what the ensure should be here. *)
  mode g120_130_stabilizing (
    require not ::manual_override ;
    require not ::too_fast ;
    require in_fpa_engaged ;
    require fpa_tgt_lb >= in_fpa ;
    require fpa_tgt_ub <= in_fpa ;
  ) ;


  -- import alt (
  --   inhibit, in_alt_engaged, in_alt, in_alt_target, in_gskts, in_hdot
  -- ) returns (
  --   out_alt
  -- ) ;
  -- import fpa (
  --   inhibit, in_fpa_engaged, in_fpa, in_fpa_target, in_pitch, in_speed,
  --   fpa_tgt_lb, fpa_tgt_ub
  -- ) returns (
  --   out_pitch
  -- ) ;
tel







(* Contract for `Mode_plus_Longitudinal`. *)
contract logic_longitudinal (
  in_head_engage, in_alt_engage, in_fpa_engage: bool ;
  in_alt, in_alt_target, in_hdot,
  in_fpa, in_fpa_target,
  in_pitch,
  in_speed,
  in_gskts,
  in_cas,
  in_elev,
  in_ail: real
) returns (
  out_head_engaged, out_alt_engaged, out_fpa_engaged: bool ;
  out_alt, out_pitch, out_elev: real
) ;
let
  var deactivate: bool = in_elev <> 0.0 or in_ail <> 0.0 ;

  import logic (
    in_head_engage, in_alt_engage, in_fpa_engage, deactivate,
    in_alt, in_alt_target
  ) returns (
    out_head_engaged, out_alt_engaged, out_fpa_engaged
  ) ;

  import longitudinal (
    ::logic::logic_alt_fpa::alt_wag_170 or
    ::logic::logic_alt_fpa::alt_tag_210,
    ::logic::logic_alt_fpa::fpa_wag_180 or
    ::logic::logic_alt_fpa::fpa_tag_210,
    in_alt, in_alt_target, in_hdot,
    in_fpa, in_fpa_target,
    in_pitch,
    in_speed,
    in_gskts,
    in_cas,
    in_elev
  ) returns (
    out_alt, out_pitch, out_elev
  ) ;

tel








