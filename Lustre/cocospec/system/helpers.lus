node max(fst, snd: real) returns (out: real) ;
let
  out = if fst >= snd then fst else snd ;
tel

node min(fst, snd: real) returns (out: real) ;
let
  out = if fst <= snd then fst else snd ;
tel

node duration(in: bool) returns (out: int) ;
var always_true: bool ;
let
  always_true = in -> in and (pre always_true) ;
  out = if always_true then (1 -> pre out + 1) else 0 ;
tel

node fall(in: bool) returns (out: bool) ;
let
  out = false -> (not in) and pre in ;
tel

node rise(in: bool) returns (out: bool) ;
let
  out = false -> in and pre not in ;
tel

node count(in: bool) returns (out: int) ;
let
  out = if in then (1 -> pre out + 1) else 0 ;
tel

node count_succ_true(in: bool) returns (out: int) ;
let
  out = if in then (1 -> pre out + 1) else 0 ;
tel

node count_true_since(in, reset: bool) returns (out: int) ;
let
  out = if reset then 0 else if in then 0 -> pre out + 1 else 0 -> pre out ;
tel

node has_been_true(in: bool) returns (out: bool) ;
let
  out = in -> in or pre out ;
tel

node has_been_true_reset(in, reset: bool) returns (out: bool) ;
let
  out = (in -> (in or pre out)) and not reset ;
tel

node spike_or_confirmed(in: bool ; const count: int ; reset: bool)
returns (out: bool) ;
let
  out = (in and not reset) or has_been_true_reset(since(in) = count, reset) ;
tel

node before_lt(max: int) returns (out: bool) ;
let
  out = duration(true) < max ;
tel

node after_ge(min: int) returns (out: bool) ;
let
  out = duration(true) >= min ;
tel

node since(in: bool) returns (out: int) ;
let
  out = (if in then 1 else 0) -> ( if in then pre out + 1 else 0 ) ;
tel

node since_le_not_0(in: bool; const max: int) returns (out: bool) ;
var sinc3: int ;
let
  sinc3 = since(in) ;
  out = (0 < sinc3) and (sinc3 <= max) ;
tel

node since_gt_or_0(in: bool; const min: int) returns (out: bool) ;
var sinc3: int ;
let
  sinc3 = since(in) ;
  out = (0 = sinc3) or (sinc3 > min) ;
tel

node lasted(in: bool) returns (out: int) ;
let
  out = (if in then 1 else 0) -> (
    if in then pre out + 1 else 0
  ) ;
tel

node f_t_t_t(i1, i2, i3, i4: bool) returns (out: bool) ;
let
  out = (not i1) and i2 and i3 and i4 ;
tel

node t_f_t_t(i1, i2, i3, i4: bool) returns (out: bool) ;
let
  out = i1 and (not i2) and i3 and i4 ;
tel

node abs(in: real) returns (out: real) ;
let
  out = if in < 0.0 then -in else in ;
tel

node clamp(l_bound, in, u_bound: real) returns (out: real) ;
let
  out =
    if in < l_bound then l_bound else if in > u_bound then u_bound else in ;
tel



-- node integrator_reset(
--   in, in0 : real ; reset : bool
-- ) returns (
--   out : real
-- ) ;
-- var
--   resetting: bool ;
--   pre_reset, v, v_reset: real ;
-- let
--   resetting = reset or (false -> pre reset) ;
--   pre_reset = if resetting then in0 else (in0 -> pre v) ;
--   v = in + pre_reset ;
--   out = 0.0 -> pre v ;
-- tel


node Right (heading, cmd: real) returns (out: bool) ;
let
  out = (
    ((cmd - heading) > 0.0) and
    ((cmd - heading) < 180.0)
  ) ;
--   or (
--    (cmd - heading) < - 180.0
--  ) ;
tel


node Left (heading, cmd: real) returns (out: bool) ;
let
  -- out = (heading <> cmd) and (not Right(heading, cmd)) ;
  out = (
    ((cmd - heading) < 0.0) and
    ((cmd - heading) > - 180.0)
  ) ;
--  or (
--    (cmd - heading) > 180.0
--  ) ;
tel

node sign(in: real) returns (out: bool) ;
let
  out = in >= 0.0 ;
tel

node PseudoContinuous (in, inc: real) returns (out: bool) ;
let out = abs(in - (in -> pre in)) <= inc ; tel

-- |===| Abstractions of non-linear streams.

node times(x, y: real) returns (z: real) ;
(*@contract
var abs_x: real = if x < 0.0 then -x else x ;
var abs_y: real = if y < 0.0 then -y else y ;
var abs_z: real = if z < 0.0 then -z else z ;
-- Neutral.
guarantee (z = y) = ((x = 1.0) or (y = 0.0)) ;
guarantee (z = x) = ((y = 1.0) or (x = 0.0)) ;
-- Absorbing.
guarantee (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
-- Sign.
guarantee (z > 0.0) = (
  ( (x > 0.0) and (y > 0.0) ) or
  ( (x < 0.0) and (y < 0.0) )
) ;
guarantee (z < 0.0) = (
  ( (x > 0.0) and (y < 0.0) ) or
  ( (x < 0.0) and (y > 0.0) )
) ;
-- Loose proportionality.
guarantee (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
guarantee (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
guarantee (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
guarantee (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
*)
let
  z = x * y ;
tel

node divid(num, den: real) returns (res: real) ;
(*@contract
var abs_num: real = if num < 0.0 then -num else num ;
var abs_den: real = if den < 0.0 then -den else den ;
var abs_res: real = if res < 0.0 then -res else res ;
assume not (den = 0.0) ;
-- Neutral.
guarantee (res = num) = ((den = 1.0) or (num = 0.0)) ;
guarantee (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
guarantee (num = 0.0) = (res = 0.0) ;
-- Sign.
guarantee (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
guarantee (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
guarantee (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
guarantee (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
guarantee (res = 1.0) = (num = den) ;
guarantee (res = - 1.0) = (num = - den) ;
*)
let
  res = num / den ;
tel

(* Division with some bounds on the denominator.
  Bounds MUST BE NUMBERS, otherwise the contract is non-linear. *)
node divid_bounded_num(
  num, den: real ; const l_bound, u_bound: real
) returns (res: real) ;
(*@contract
  var abs_num: real = if num < 0.0 then -num else num ;
  var abs_den: real = if den < 0.0 then -den else den ;
  var abs_res: real = if res < 0.0 then -res else res ;
  assume not (den = 0.0) ;
(* Denominator respects its bounds. *)
  assume l_bound <> 0.0 ;
  assume u_bound <> 0.0 ;
  assume l_bound <= u_bound ;
  assume l_bound <= den ;
  assume            den <= u_bound ;
-- Neutral.
  guarantee (res = num) = ((den = 1.0) or (num = 0.0)) ;
  guarantee (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
  guarantee (num = 0.0) = (res = 0.0) ;
-- Sign.
  guarantee (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
  guarantee (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
  guarantee (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
  guarantee (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
  guarantee (res = 1.0) = (num = den) ;
  guarantee (res = - 1.0) = (num = - den) ;

-- Bounded result.
  mode num_pos_l_bound_pos (
    require num >= 0.0 ;
    require l_bound > 0.0 ;
    ensure num / u_bound <= res ;
    ensure                  res <= num / l_bound ;
  ) ;
  mode num_pos_u_bound_neg (
    require num >= 0.0 ;
    require u_bound < 0.0 ;
    ensure num / u_bound <= res ;
    ensure                  res <= num / l_bound ;
  ) ;
  mode num_neg_l_bound_pos (
    require num < 0.0 ;
    require l_bound > 0.0 ;
    ensure num / l_bound <= res ;
    ensure                  res <= num / u_bound ;
  ) ;
  mode num_neg_u_bound_neg (
    require num < 0.0 ;
    require u_bound < 0.0 ;
    ensure num / l_bound <= res ;
    ensure                  res <= num / u_bound ;
  ) ;
  mode num_pos_l_bound_neg_u_bound_pos (
    require num >= 0.0 ;
    require u_bound > 0.0 ;
    require l_bound < 0.0 ;
    ensure res <= num / l_bound or num / u_bound <= res ;
  ) ;
  mode num_neg_l_bound_neg_u_bound_pos (
    require num < 0.0 ;
    require u_bound > 0.0 ;
    require l_bound < 0.0 ;
    ensure res <= num / u_bound or num / l_bound <= res ;
  ) ;
*)
let
  res = num / den ;
tel

node temporal_divid(num, den: real) returns (res: real) ;
(*@contract
  var abs_num: real = if num < 0.0 then -num else num ;
  var abs_den: real = if den < 0.0 then -den else den ;
  var abs_res: real = if res < 0.0 then -res else res ;
  assume not (den = 0.0) ;
-- Neutral.
  guarantee (res = num) = ((den = 1.0) or (num = 0.0)) ;
  guarantee (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
  guarantee (num = 0.0) = (res = 0.0) ;
-- Sign.
  guarantee (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
  guarantee (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
  guarantee (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
  guarantee (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
  guarantee (res = 1.0) = (num = den) ;
  guarantee (res = - 1.0) = (num = - den) ;

-- Evolution.
  mode init (
    require true -> false ;
    ensure true -> false ;
  ) ;

  mode both_inc (
    require false -> (num > pre num) ;
    require false -> (den > pre den) ;
  ) ;

  mode both_dec (
    require false -> (num < pre num) ;
    require false -> (den < pre den) ;
  ) ;

  mode inc_by_num_inc (
    require false -> (num > pre num) ;
    require false -> (den = pre den) ;
    ensure  false -> (res > pre res) ;
  ) ;

  mode inc_by_den_dec (
    require false -> (num = pre num) ;
    require false -> (den < pre den) ;
    ensure  false -> (res > pre res or res = 0.0) ;
  ) ;

  mode inc_by_num_inc_den_dec (
    require false -> (num > pre num) ;
    require false -> (den < pre den) ;
    ensure  false -> (res > pre res) ;
  ) ;

  mode dec_by_num_dec (
    require false -> (num < pre num) ;
    require false -> (den = pre den) ;
    ensure  false -> (res < pre res) ;
  ) ;

  mode dec_by_den_inc (
    require false -> (num = pre num) ;
    require false -> (den > pre den) ;
    ensure  false -> (res < pre res or res = 0.0) ;
  ) ;

  mode dec_by_num_dec_den_inc (
    require false -> (num < pre num) ;
    require false -> (den > pre den) ;
    ensure  false -> (res < pre res) ;
  ) ;

  mode steady (
    require false -> (num = pre num) ;
    require false -> (den = pre den) ;
    ensure  false -> (res = pre res) ;
  ) ;
*)
let
  res = num / den ;
tel



-- |===| latitudinal_control.lus

node nl_latitudinal_1(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / in2 * in3 ;
  out = times(in3, divid(in1, in2)) ;
tel

node nl_latitudinal_2(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / in2 * in3 ;
  out = times(in3, divid(in1, in2)) ;
tel

node nl_latitudinal_3(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / in2 * in3 ;
  out = times(in3, divid(in1, in2)) ;
tel

node nl_latitudinal_4(in1, in2: real) returns (out: real) ;
let
  -- out = in1 / in2 ;
  out = times(in1, in2) ;
tel

node nl_latitudinal_5(in1, in2: real) returns (out: real) ;
let
  -- out = in1 / in2 ;
  out = times(in1, in2) ;
tel

node nl_latitudinal_6(in1, in2: real) returns (out: real) ;
let
  -- out = in1 / in2 ;
  out = times(in1, in2) ;
tel

node nl_latitudinal_7(in1, in2: real) returns (out: real) ;
let
  -- out = in1 / in2 ;
  out = times(in1, in2) ;
tel

node nl_latitudinal_8(in1, in2: real) returns (out: real) ;
let
  -- out = in1 * in2 ;
  out = times(in1, in2) ;
tel

node nl_latitudinal_9(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 * in2 * in3 ;
  out = times(in1, times(in2, in3)) ;
tel

node nl_latitudinal_10(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 * in2 * in3 ;
  out = times(in1, times(in2, in3)) ;
tel

node nl_latitudinal_11(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 * in2 * in3 ;
  out = times(in1, times(in2, in3)) ;
tel

node nl_latitudinal_12(in1, in2: real) returns (out: real) ;
let
  -- out = in1 * in2 ;
  out = times(in1, in2) ;
tel

-- |===| longitudinal_control.lus

node nl_longitudinal_1(in1, in2: real) returns (out: real) ;
let
  -- out = in1 * in2 ;
  out = times(in1, in2) ;
tel

node nl_longitudinal_2(in1, in2: real) returns (out: real) ;
let
  -- out = in1 * in2 ;
  out = times(in1, in2) ;
tel

node nl_longitudinal_3(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 * in2 ;
  out = times(in1, in2) ;
tel

node nl_longitudinal_4(in1, in2: real) returns (out: real) ;
let
  -- out = in1 / in2 ;
  out = divid(in1, in2) ;
tel

node nl_longitudinal_5(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / (in2 * in3) ;
  out = divid(in1, times(in2, in3)) ;
tel

node nl_longitudinal_6(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / (in2 * in3) ;
  out = divid(in1, times(in2, in3)) ;
tel

node nl_longitudinal_7(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / (in2 * in3) ;
  out = divid(in1, times(in2, in3)) ;
tel

node nl_longitudinal_8(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / in2 * in3 ;
  out = divid(in1, times(in2, in3)) ;
tel

node nl_longitudinal_9(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / in2 * in3 ;
  out = divid(in1, times(in2, in3)) ;
tel

node nl_longitudinal_10(in1, in2, in3: real) returns (out: real) ;
let
  -- out = in1 / in2 * in3 ;
  out = divid(in1, times(in2, in3)) ;
tel



