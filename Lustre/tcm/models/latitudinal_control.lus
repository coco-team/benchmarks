-- latitiduanl control


node __tan ( x  : real  ) 
   returns ( out  : real  ) ;
 
let
out  = if ( 0.000000 <= x and x <= 0.157080  ) then 0.000000 + ( 0.995893 * ( x - 0.000000  )  ) 
       else if ( 0.157080 <= x and x <= 0.314159  ) then 0.156434 + ( 0.971371 * ( x - 0.157080  )  ) 
       else if ( 0.314159 <= x and x <= 0.471239  ) then 0.309017 + ( 0.922930 * ( x - 0.314159  )  ) 
       else if ( 0.471239 <= x and x <= 0.628319  ) then 0.453990 + ( 0.851764 * ( x - 0.471239  )  ) 
       else if ( 0.628319 <= x and x <= 0.785398  ) then 0.587785 + ( 0.759624 * ( x - 0.628319  )  ) 
       else if ( 0.785398 <= x and x <= 0.942478  ) then 0.707107 + ( 0.648781 * ( x - 0.785398  )  ) 
       else if ( 0.942478 <= x and x <= 1.099557  ) then 0.809017 + ( 0.521962 * ( x - 0.942478  )  ) 
       else if ( 1.099557 <= x and x <= 1.256637  ) then 0.891007 + ( 0.382290 * ( x - 1.099557  )  ) 
       else if ( 1.256637 <= x and x <= 1.413717  ) then 0.951057 + ( 0.233205 * ( x - 1.256637  )  ) 
       else if ( 1.413717 <= x and x <= 1.570796  ) then 0.987688 + ( 0.078378 * ( x - 1.413717  )  ) else - 1.000000;
 tel 


-- Interpolation for the tan function
node tan ( x  : real  ) returns ( out  : real  ) ;
 let
   out  = if ( 0.000000 <= x and x <= 1.570796  ) then __tan ( x  ) 
         else if ( 1.570796 <= x and x <= 3.141593  ) then __tan ( 3.141593 - x  ) 
         else if ( 3.141593 <= x and x <= 4.712389  ) then - ( __tan ( x - 3.141593  )  ) 
         else if ( 4.712389 <= x and x <= 6.283185  ) then - ( __tan ( 6.283185 - x  )  ) else - 1.000000;
 tel 


node ANGL ( in_Out1_76  : real  ) returns ( _180_In1_238  : real  ) ;
var Abs_Out1_79  : real ;
 Relational_Operator_ANGL_Out1_101  : bool ;
 Sum6_Out1_111  : real ;
 Switch1_ANGL_Out1_120  : real ;
 sign_Out1_127  : real ;
 times360_Out1_226  : real ;
 Abs_In1_78  : real ;
 Relational_Operator_ANGL_In1_99  : real ;
 Sum6_In1_109  : real ;
 Sum6_In2_110  : real ;
 Switch1_ANGL_In1_117  : real ;
 Switch1_ANGL_In2_118  : bool ;
 Switch1_ANGL_In3_119  : real ;
 sign_In1_126  : real ;
  
let
Abs_Out1_79  = if Abs_In1_78 < 0.000000 then - Abs_In1_78 else Abs_In1_78;
Relational_Operator_ANGL_Out1_101  = Relational_Operator_ANGL_In1_99 > 180.000000;
Sum6_Out1_111  = - Sum6_In1_109 + Sum6_In2_110;
Switch1_ANGL_Out1_120  = if Switch1_ANGL_In2_118 then Switch1_ANGL_In1_117 else Switch1_ANGL_In3_119;
sign_Out1_127  = if sign_In1_126  > 0.000000 then 1.000000 else (if sign_In1_126 = 0.000000 then 0.00000 else -1.00000);
times360_Out1_226  = 360.000000 * sign_Out1_127;
Relational_Operator_ANGL_In1_99  = Abs_Out1_79;
Abs_In1_78  = in_Out1_76;
Switch1_ANGL_In3_119  = in_Out1_76;
Sum6_In2_110  = in_Out1_76;
sign_In1_126  = in_Out1_76;
_180_In1_238  = Switch1_ANGL_Out1_120;
Sum6_In1_109  = times360_Out1_226;
Switch1_ANGL_In1_117  = Sum6_Out1_111;
Switch1_ANGL_In2_118  = Relational_Operator_ANGL_Out1_101;
 tel 




node Saturation ( signal  : real  ) returns ( saturated_signal  : real  ) ;
var low_lim  : real ; 
let
  saturated_signal  = if ( low_lim <= 1000.000000  ) then low_lim else 1000.000000;
  low_lim  = if ( 0.000100 >= signal  ) then 0.000100 else signal;
 tel 

node HgdCmdProcessor ( Vt_Out1_19  : real ; HdgCmdMCP_Out1_29  : real ; Heading_Out1_39  : real  ) 
   returns ( HdgCmd_In1_947  : real ; HdgRteCmd_In1_959  : real  ) ;
var var2zetaOmega_Out1_59  : real ;
 ANGL_Out1_66  : real ;
 Divide_Out1_262  : real ;
 Divide1_Out1_274  : real ;
 DynamicSaturation_Out1_283  : real ;
 Integrator1_Out1_380  : real ;
 Logical_Operator_Out1_385  : bool ;
 Product_Out1_397  : real ;
 Product1_Out1_409  : real ;
 Saturation1_Out1_416  : real ;
 Sum2_Out1_489  : real ;
 Sum3_Out1_499  : real ;
 Trigonometric_Function_Out1_504  : real ;
 k_Out1_723  : real ;
 k1_Out1_732  : real ;
 k2_Out1_741  : real ;
 k4_Out1_750  : real ;
 k6_Out1_759  : real ;
 omegaSq_Out1_771  : real ;
 omegaSq2_Out1_783  : real ;
 omega_calc_Out1_790  : real ;
 rateLim_calc_Out1_875  : real ;
 times514dot8_Out1_890  : real ;
 Integrator1_1_Out1_598  : real ;
 Logical_Operator1_1_Out1_604  : bool ;
 Logical_Operator1_2_Out1_610  : bool ;
 Logical_Operator1_3_Out1_616  : bool ;
 Relational_Operator_Out1_622  : bool ;
 Relational_Operator1_Out1_628  : bool ;
 Relational_Operator2_Out1_634  : bool ;
 Relational_Operator3_Out1_640  : bool ;
 Switch1_Out1_649  : real ;
 Switch2_Out1_658  : real ;
 Switch3_Out1_667  : real ;
 var2zetaOmega_In1_57  : real ;
 var2zetaOmega_In2_58  : real ;
 ANGL_In1_65  : real ;
 DynamicSaturation_In1_280  : real ;
 DynamicSaturation_In2_281  : real ;
 DynamicSaturation_In3_282  : real ;
 Integrator1_In1_377  : real ;
 Integrator1_In2_378  : bool ;
 Integrator1_In3_379  : real ;
 Logical_Operator_In1_384  : bool ;
 Product_In2_396  : real ;
 Product1_In1_407  : real ;
 Product1_In2_408  : real ;
 Saturation1_In1_415  : real ;
 Sum2_In1_487  : real ;
 Sum2_In2_488  : real ;
 Sum3_In1_497  : real ;
 Sum3_In2_498  : real ;
 Trigonometric_Function_In1_503  : real ;
 k_In1_722  : real ;
 k1_In1_731  : real ;
 k2_In1_740  : real ;
 k4_In1_749  : real ;
 k6_In1_758  : real ;
 omegaSq_In1_769  : real ;
 omegaSq_In2_770  : real ;
 omegaSq2_In1_781  : real ;
 omegaSq2_In2_782  : real ;
 omega_calc_In1_789  : real ;
 rateLim_calc_In1_873  : real ;
 rateLim_calc_In2_874  : real ;
 times514dot8_In1_889  : real ;
 Integrator1_1_In1_595  : real ;
 Integrator1_1_In2_596  : bool ;
 Logical_Operator1_1_In1_602  : bool ;
 Logical_Operator1_1_In2_603  : bool ;
 Logical_Operator1_2_In1_608  : bool ;
 Logical_Operator1_2_In2_609  : bool ;
 Logical_Operator1_3_In1_614  : bool ;
 Logical_Operator1_3_In2_615  : bool ;
 Relational_Operator_In1_620  : real ;
 Relational_Operator_In2_621  : real ;
 Relational_Operator1_In1_626  : real ;
 Relational_Operator1_In2_627  : real ;
 Relational_Operator2_In1_632  : real ;
 Relational_Operator3_In1_638  : real ;
 Switch1_In1_646  : real ;
 Switch1_In2_647  : bool ;
 Switch1_In3_648  : real ;
 Switch2_In1_655  : real ;
 Switch2_In2_656  : bool ;
 Switch2_In3_657  : real ;
 Switch3_In2_665  : bool ;
 Switch3_In3_666  : real ;
 integrator_out_1  : real ;
 integrator_out_2  : real ;
let
var2zetaOmega_Out1_59  = var2zetaOmega_In1_57 * var2zetaOmega_In2_58;
ANGL_Out1_66  = ANGL ( ANGL_In1_65  );
Divide_Out1_262  = 565.470000;
Divide1_Out1_274  = 565.470000;
DynamicSaturation_Out1_283  = DynamicSaturation_In1_280;
integrator_out_1 = IntegratorReset ( Integrator1_In1_377 , Integrator1_In2_378 , Integrator1_In3_379);
Integrator1_Out1_380  = Integrator1_In3_379 -> pre (integrator_out_1);
Logical_Operator_Out1_385  = not Logical_Operator_In1_384;
Product_Out1_397  = 30.000000 * Product_In2_396;
Product1_Out1_409  = Product1_In1_407 * Product1_In2_408;
Saturation1_Out1_416  = Saturation ( Saturation1_In1_415  );
Sum2_Out1_489  = Sum2_In1_487 + - Sum2_In2_488;
Sum3_Out1_499  = Sum3_In1_497 + - Sum3_In2_498;
Trigonometric_Function_Out1_504  = Trigonometric_Function_In1_503;
k_Out1_723  = - 1.000000 * k_In1_722;
k1_Out1_732  = - 1.000000 * k1_In1_731;
k2_Out1_741  = 1.687800 * k2_In1_740;
k4_Out1_750  = 32.174000 * k4_In1_749;
k6_Out1_759  = 2.000000 * k6_In1_758;
omegaSq_Out1_771  = omegaSq_In1_769 * omegaSq_In2_770;
omegaSq2_Out1_783  = omegaSq2_In1_781 * omegaSq2_In2_782;
omega_calc_Out1_790  = 1.600000;
rateLim_calc_Out1_875  = rateLim_calc_In1_873 * rateLim_calc_In2_874;
times514dot8_Out1_890  = 514.800000 * times514dot8_In1_889;
integrator_out_2 = IntegratorReset ( Integrator1_1_In1_595 , Integrator1_1_In2_596 , 0.000000);
Integrator1_1_Out1_598  = 0.000000 -> pre (integrator_out_2);
Logical_Operator1_1_Out1_604  = Logical_Operator1_1_In1_602 and Logical_Operator1_1_In2_603;
Logical_Operator1_2_Out1_610  = Logical_Operator1_2_In1_608 and Logical_Operator1_2_In2_609;
Logical_Operator1_3_Out1_616  = Logical_Operator1_3_In1_614 or Logical_Operator1_3_In2_615;
Relational_Operator_Out1_622  = Relational_Operator_In1_620 <= Relational_Operator_In2_621;
Relational_Operator1_Out1_628  = Relational_Operator1_In1_626 >= Relational_Operator1_In2_627;
Relational_Operator2_Out1_634  = Relational_Operator2_In1_632 > 0.000000;
Relational_Operator3_Out1_640  = Relational_Operator3_In1_638 < 0.000000;
Switch1_Out1_649  = if Switch1_In2_647 then Switch1_In1_646 else Switch1_In3_648;
Switch2_Out1_658  = if Switch2_In2_656 then Switch2_In1_655 else Switch2_In3_657;
Switch3_Out1_667  = if Switch3_In2_665 then 0.000000 else Switch3_In3_666;
Sum2_In2_488  = Integrator1_Out1_380;
HdgCmd_In1_947  = Integrator1_Out1_380;
k2_In1_740  = Vt_Out1_19;
Saturation1_In1_415  = k2_Out1_741;
omegaSq_In2_770  = omega_calc_Out1_790;
omegaSq_In1_769  = omega_calc_Out1_790;
k6_In1_758  = omega_calc_Out1_790;
DynamicSaturation_In3_282  = k_Out1_723;
DynamicSaturation_In2_281  = Sum3_Out1_499;
Trigonometric_Function_In1_503  = Product_Out1_397;
k4_In1_749  = Trigonometric_Function_Out1_504;
Product1_In1_407  = k4_Out1_750;
k1_In1_731  = rateLim_calc_Out1_875;
var2zetaOmega_In1_57  = Switch2_Out1_658;
HdgRteCmd_In1_959  = Switch2_Out1_658;
Integrator1_In1_377  = Switch2_Out1_658;
var2zetaOmega_In2_58  = k6_Out1_759;
Sum3_In2_498  = var2zetaOmega_Out1_59;
DynamicSaturation_In1_280  = times514dot8_Out1_890;
k_In1_722  = times514dot8_Out1_890;
omegaSq2_In1_781  = omegaSq_Out1_771;
Sum3_In1_497  = omegaSq2_Out1_783;
ANGL_In1_65  = Sum2_Out1_489;
Logical_Operator_In1_384  = if HdgCmdMCP_Out1_29 = 0.000000 then false else true;
Sum2_In1_487  = HdgCmdMCP_Out1_29;
omegaSq2_In2_782  = ANGL_Out1_66;
Integrator1_In2_378  = Logical_Operator_Out1_385;
omega_calc_In1_789  = Saturation1_Out1_416;
times514dot8_In1_889  = Saturation1_Out1_416;
rateLim_calc_In2_874  = Saturation1_Out1_416;
Integrator1_In3_379  = Heading_Out1_39;
Product_In2_396  = Divide_Out1_262;
Product1_In2_408  = Divide1_Out1_274;
rateLim_calc_In1_873  = Product1_Out1_409;
Relational_Operator1_In1_626  = k1_Out1_732;
Switch2_In1_655  = k1_Out1_732;
Integrator1_1_In2_596  = Logical_Operator_Out1_385;
Switch3_In3_666  = DynamicSaturation_Out1_283;
Relational_Operator3_In1_638  = DynamicSaturation_Out1_283;
Relational_Operator2_In1_632  = DynamicSaturation_Out1_283;
Relational_Operator_In1_620  = rateLim_calc_Out1_875;
Switch1_In1_646  = rateLim_calc_Out1_875;
Logical_Operator1_2_In2_609  = Relational_Operator1_Out1_628;
Switch2_In2_656  = Relational_Operator1_Out1_628;
Switch2_In3_657  = Switch1_Out1_649;
Relational_Operator1_In2_627  = Switch1_Out1_649;
Logical_Operator1_2_In1_608  = Relational_Operator3_Out1_640;
Logical_Operator1_3_In2_615  = Logical_Operator1_2_Out1_610;
Logical_Operator1_3_In1_614  = Logical_Operator1_1_Out1_604;
Switch3_In2_665  = Logical_Operator1_3_Out1_616;
Logical_Operator1_1_In2_603  = Relational_Operator2_Out1_634;
Integrator1_1_In1_595  = Switch3_Out1_667;
Logical_Operator1_1_In1_602  = Relational_Operator_Out1_622;
Switch1_In2_647  = Relational_Operator_Out1_622;
Relational_Operator_In2_621  = Integrator1_1_Out1_598;
Switch1_In3_648  = Integrator1_1_Out1_598;
 tel 

node HeadingControl ( HdgCmdMCP_Out1_19  : real ; Heading_Out1_29  : real ; psidot_Out1_39  : real ; Vt_Out1_49  : real ; Roll_Out1_59  : real ; HeadEng_Out1_69  : bool ; rollLimitinput_Out1_79  : real  ) 
   returns ( RollCmd_In1_1442  : real  ) ;
var HdgCmdProcessor_Out1_88  : real ;
 HdgCmdProcessor_Out2_89  : real ;
 Khdg_Out1_1105  : real ;
 Khdg1_Out1_1114  : real ;
 Khdg2_Out1_1123  : real ;
 Khdgrte_Out1_1132  : real ;
 Logical_Operator_Out1_1137  : bool ;
 Max_Out1_1147  : real ;
 Min_Out1_1157  : real ;
 Mux_Out1_1161_0  : real ;
 Mux_Out1_1161_1  : real ;
 Sum_Out1_1171  : real ;
 Sum1_Out1_1181  : real ;
 Sum2_Out1_1191  : real ;
 Sum3_Out1_1201  : real ;
 Sum4_Out1_1211  : real ;
 -- sgn_Out1_1430  : real ;
 Integrator1_1_Out1_1305  : real ;
 Logical_Operator1_1_Out1_1311  : bool ;
 Logical_Operator1_2_Out1_1317  : bool ;
 Logical_Operator1_3_Out1_1323  : bool ;
 Relational_Operator_Out1_1329  : bool ;
 Relational_Operator1_Out1_1335  : bool ;
 Relational_Operator2_Out1_1341  : bool ;
 Relational_Operator3_Out1_1347  : bool ;
 Switch1_Out1_1356  : real ;
 Switch2_Out1_1365  : real ;
 Switch3_Out1_1374  : real ;
 HdgCmdProcessor_In1_85  : real ;
 HdgCmdProcessor_In2_86  : real ;
 HdgCmdProcessor_In3_87  : real ;
 Khdg_In1_1104  : real ;
 Khdg1_In1_1113  : real ;
 Khdg2_In1_1122  : real ;
 Khdgrte_In1_1131  : real ;
 Logical_Operator_In1_1136  : bool ;
 Max_In1_1145  : real ;
 Max_In2_1146  : real ;
 Min_In1_1155  : real ;
 Min_In2_1156  : real ;
 Mux_In1_1159  : real ;
 Mux_In2_1160  : real ;
 Sum_In1_1169  : real ;
 Sum_In2_1170  : real ;
 Sum1_In1_1179  : real ;
 Sum1_In2_1180  : real ;
 Sum2_In1_1189  : real ;
 Sum2_In2_1190  : real ;
 Sum3_In1_1199  : real ;
 Sum3_In2_1200  : real ;
 Sum4_In1_1209  : real ;
 Sum4_In2_1210  : real ;
 -- sgn_In1_1429  : real ;
 Integrator1_1_In1_1302  : real ;
 Integrator1_1_In2_1303  : bool ;
 Integrator1_1_In3_1304  : real ;
 Logical_Operator1_1_In1_1309  : bool ;
 Logical_Operator1_1_In2_1310  : bool ;
 Logical_Operator1_2_In1_1315  : bool ;
 Logical_Operator1_2_In2_1316  : bool ;
 Logical_Operator1_3_In1_1321  : bool ;
 Logical_Operator1_3_In2_1322  : bool ;
 -- Relational_Operator_In1_1327  : real ;
 Relational_Operator_In2_1328  : real ;
 -- Relational_Operator1_In1_1333  : real ;
 Relational_Operator1_In2_1334  : real ;
 Relational_Operator2_In1_1339  : real ;
 -- Relational_Operator2_In2_1340  : real ;
 Relational_Operator3_In1_1345  : real ;
 -- Relational_Operator3_In2_1346  : real ;
 -- Switch1_In1_1353  : real ;
 Switch1_In2_1354  : bool ;
 Switch1_In3_1355  : real ;
 -- Switch2_In1_1362  : real ;
 Switch2_In2_1363  : bool ;
 Switch2_In3_1364  : real ;
 -- Switch3_In1_1371  : real ;
 Switch3_In2_1372  : bool ;
 Switch3_In3_1373  : real ;
 integrator_out : real ;
let
HdgCmdProcessor_Out1_88 , HdgCmdProcessor_Out2_89  = HgdCmdProcessor ( HdgCmdProcessor_In1_85 , HdgCmdProcessor_In2_86 , HdgCmdProcessor_In3_87  );
Khdg_Out1_1105  = 0.050000 * Khdg_In1_1104;
-- Khdg1_Out1_1114  = int_to_real ( 1  ) *Khdg1_In1_1113;
Khdg1_Out1_1114  = Khdg1_In1_1113;
-- Khdg2_Out1_1123  = int_to_real ( 1  ) * Khdg2_In1_1122;
Khdg2_Out1_1123  = Khdg2_In1_1122;
Khdgrte_Out1_1132  = 3.0 * Khdgrte_In1_1131;
Logical_Operator_Out1_1137  = not Logical_Operator_In1_1136;
Max_Out1_1147  = if Max_In1_1145 >= Max_In2_1146 then Max_In2_1146 else Max_In1_1145;
Min_Out1_1157  = if Min_In1_1155 <= Min_In2_1156 then Min_In1_1155 else Min_In2_1156;
-- [ Mux_Out1_1161_0 , Mux_Out1_1161_1  ]  = [ Mux_In1_1159 , Mux_In2_1160  ];
Mux_Out1_1161_0  = Mux_In1_1159 ;
Mux_Out1_1161_1  =  Mux_In2_1160 ;  
Sum_Out1_1171  = Sum_In1_1169 + - Sum_In2_1170;
Sum1_Out1_1181  = Sum1_In1_1179 + Sum1_In2_1180;
Sum2_Out1_1191  = Sum2_In1_1189 + - Sum2_In2_1190;
Sum3_Out1_1201  = - Sum3_In1_1199 + - Sum3_In2_1200;
Sum4_Out1_1211  = Sum4_In1_1209 + - Sum4_In2_1210;
-- sgn_Out1_1430  = int_to_real ( - 1  ) * sgn_In1_1429;
-- sgn_Out1_1430  = - 30.0;
integrator_out = IntegratorReset ( Integrator1_1_In1_1302 , Integrator1_1_In2_1303 , Integrator1_1_In3_1304);
Integrator1_1_Out1_1305  = Integrator1_1_In3_1304 -> pre (integrator_out);
Logical_Operator1_1_Out1_1311  = Logical_Operator1_1_In1_1309 and Logical_Operator1_1_In2_1310;
Logical_Operator1_2_Out1_1317  = Logical_Operator1_2_In1_1315 and Logical_Operator1_2_In2_1316;
Logical_Operator1_3_Out1_1323  = Logical_Operator1_3_In1_1321 or Logical_Operator1_3_In2_1322;
-- Relational_Operator_Out1_1329  = Relational_Operator_In1_1327 <= Relational_Operator_In2_1328;
Relational_Operator_Out1_1329  = 30.0 <= Relational_Operator_In2_1328;
-- Relational_Operator1_Out1_1335  = Relational_Operator1_In1_1333 >= Relational_Operator1_In2_1334;
Relational_Operator1_Out1_1335  = -30.0 >= Relational_Operator1_In2_1334;
-- Relational_Operator2_Out1_1341  = Relational_Operator2_In1_1339 > Relational_Operator2_In2_1340;
Relational_Operator2_Out1_1341  = Relational_Operator2_In1_1339 > 0.0;
-- Relational_Operator3_Out1_1347  = Relational_Operator3_In1_1345 < Relational_Operator3_In2_1346;
Relational_Operator3_Out1_1347  = Relational_Operator3_In1_1345 < 0.0;
-- Switch1_Out1_1356  = if Switch1_In2_1354 then Switch1_In1_1353 else Switch1_In3_1355;
Switch1_Out1_1356  = if Switch1_In2_1354 then 30.0 else Switch1_In3_1355;
-- Switch2_Out1_1365  = if Switch2_In2_1363 then Switch2_In1_1362 else Switch2_In3_1364;
Switch2_Out1_1365  = if Switch2_In2_1363 then -30.0 else Switch2_In3_1364;
Switch3_Out1_1374  = if Switch3_In2_1372 then 0.0 else Switch3_In3_1373;
HdgCmdProcessor_In3_87  = Heading_Out1_29;
Sum_In2_1170  = Heading_Out1_29;
Sum_In1_1169  = HdgCmdProcessor_Out1_88;
Mux_In2_1160  = HdgCmdProcessor_Out1_88;
Khdg_In1_1104  = Sum_Out1_1171;
Sum1_In1_1179  = Khdg_Out1_1105;
Sum1_In2_1180  = Sum2_Out1_1191;
Sum2_In1_1189  = HdgCmdProcessor_Out2_89;
Sum2_In2_1190  = psidot_Out1_39;
HdgCmdProcessor_In1_85  = Vt_Out1_49;
HdgCmdProcessor_In2_86  = HdgCmdMCP_Out1_19;
Mux_In1_1159  = HdgCmdMCP_Out1_19;
RollCmd_In1_1442  = Switch2_Out1_1365;
Sum3_In1_1199  = Switch2_Out1_1365;
Sum4_In2_1210  = Switch2_Out1_1365;
-- sgn_In1_1429  = 30.0;
Khdgrte_In1_1131  = Sum1_Out1_1181;
Min_In1_1155  = Max_Out1_1147;
Logical_Operator_In1_1136  = HeadEng_Out1_69;
Khdg1_In1_1113  = Sum3_Out1_1201;
Khdg2_In1_1122  = Sum4_Out1_1211;
Max_In2_1146  = Khdg1_Out1_1114;
Min_In2_1156  = Khdg2_Out1_1123;
Max_In1_1145  = Khdgrte_Out1_1132;
Sum3_In2_1200  = rollLimitinput_Out1_79;
Sum4_In1_1209  = rollLimitinput_Out1_79;
-- Relational_Operator1_In1_1333  = sgn_Out1_1430;
-- Switch2_In1_1362  = sgn_Out1_1430;
-- Relational_Operator1_In1_1333  = -30.0;
-- Switch2_In1_1362  = -30.0;
Integrator1_1_In3_1304  = Roll_Out1_59;
Integrator1_1_In2_1303  = Logical_Operator_Out1_1137;
Switch3_In3_1373  = Min_Out1_1157;
Relational_Operator3_In1_1345  = Min_Out1_1157;
Relational_Operator2_In1_1339  = Min_Out1_1157;
-- Relational_Operator_In1_1327  = 30.0;
-- Switch1_In1_1353  =  30.0  ;
Logical_Operator1_2_In2_1316  = Relational_Operator1_Out1_1335;
Switch2_In2_1363  = Relational_Operator1_Out1_1335;
Switch2_In3_1364  = Switch1_Out1_1356;
Relational_Operator1_In2_1334  = Switch1_Out1_1356;
-- Relational_Operator3_In2_1346  = 0.0 ;
Logical_Operator1_2_In1_1315  = Relational_Operator3_Out1_1347;
Logical_Operator1_3_In2_1322  = Logical_Operator1_2_Out1_1317;
Logical_Operator1_3_In1_1321  = Logical_Operator1_1_Out1_1311;
Switch3_In2_1372  = Logical_Operator1_3_Out1_1323;
Logical_Operator1_1_In2_1310  = Relational_Operator2_Out1_1341;
-- Relational_Operator2_In2_1340  = 0.0;
-- Switch3_In1_1371  = 0.0 ;
Integrator1_1_In1_1302  = Switch3_Out1_1374;
Logical_Operator1_1_In1_1309  = Relational_Operator_Out1_1329;
Switch1_In2_1354  = Relational_Operator_Out1_1329;
Relational_Operator_In2_1328  = Integrator1_1_Out1_1305;
Switch1_In3_1355  = Integrator1_1_Out1_1305;
 tel 


node RI_lookup1d ( In1_Out1_1943  : real  ) 
   returns ( Out1_In1_2519  : real  ) ;
var Add_Out1_1954  : real ;
 branchsharp1_Out1_1967  : real ;
 branchsharp2_Out1_1980  : real ;
 branchsharp3_Out1_1993  : real ;
 gte1_Out1_1999  : bool ;
 gte2_Out1_2005  : bool ;
 gte3_Out1_2011  : bool ;
 interpolate1dsharp0_Out1_2022  : real ;
 interpolate1dsharp1_Out1_2160  : real ;
 interpolate1dsharp2_Out1_2298  : real ;
 lte1_Out1_2431  : bool ;
 lte2_Out1_2437  : bool ;
 lte3_Out1_2443  : bool ;
 Add_In1_1951  : real ;
 Add_In2_1952  : real ;
 Add_In3_1953  : real ;
 branchsharp1_In1_1964  : real ;
 branchsharp1_In2_1965  : real ;
 branchsharp1_In3_1966  : real ;
 branchsharp2_In1_1977  : real ;
 branchsharp2_In2_1978  : real ;
 branchsharp2_In3_1979  : real ;
 branchsharp3_In1_1990  : real ;
 branchsharp3_In2_1991  : real ;
 branchsharp3_In3_1992  : real ;
 gte1_In1_1997  : real ;
 gte1_In2_1998  : real ;
 gte2_In1_2003  : real ;
 gte2_In2_2004  : real ;
 gte3_In1_2009  : real ;
 gte3_In2_2010  : real ;
 interpolate1dsharp0_In1_2017  : real ;
 interpolate1dsharp0_In2_2018  : real ;
 interpolate1dsharp0_In3_2019  : real ;
 interpolate1dsharp0_In4_2020  : real ;
 interpolate1dsharp0_In5_2021  : real ;
 interpolate1dsharp1_In1_2155  : real ;
 interpolate1dsharp1_In2_2156  : real ;
 interpolate1dsharp1_In3_2157  : real ;
 interpolate1dsharp1_In4_2158  : real ;
 interpolate1dsharp1_In5_2159  : real ;
 interpolate1dsharp2_In1_2293  : real ;
 interpolate1dsharp2_In2_2294  : real ;
 interpolate1dsharp2_In3_2295  : real ;
 interpolate1dsharp2_In4_2296  : real ;
 interpolate1dsharp2_In5_2297  : real ;
 lte1_In1_2429  : real ;
 lte1_In2_2430  : real ;
 lte2_In1_2435  : real ;
 lte2_In2_2436  : real ;
 lte3_In1_2441  : real ;
 lte3_In2_2442  : real ;
  
let
Add_Out1_1954  = Add_In1_1951 + ( Add_In2_1952 + Add_In3_1953  );
branchsharp1_Out1_1967  = branchsharp1_In1_1964 * branchsharp1_In2_1965 * branchsharp1_In3_1966;
branchsharp2_Out1_1980  = branchsharp2_In1_1977 * branchsharp2_In2_1978 * branchsharp2_In3_1979;
branchsharp3_Out1_1993  = branchsharp3_In1_1990 * branchsharp3_In2_1991 * branchsharp3_In3_1992;
gte1_Out1_1999  = gte1_In1_1997 <= gte1_In2_1998;
gte2_Out1_2005  = gte2_In1_2003 <= gte2_In2_2004;
gte3_Out1_2011  = gte3_In1_2009 <= gte3_In2_2010;
interpolate1dsharp0_Out1_2022  = RI_interpolate1dsharp0 ( interpolate1dsharp0_In1_2017 , interpolate1dsharp0_In2_2018 , interpolate1dsharp0_In3_2019 , interpolate1dsharp0_In4_2020 , interpolate1dsharp0_In5_2021  );
interpolate1dsharp1_Out1_2160  = RI_interpolate1dsharp1 ( interpolate1dsharp1_In1_2155 , interpolate1dsharp1_In2_2156 , interpolate1dsharp1_In3_2157 , interpolate1dsharp1_In4_2158 , interpolate1dsharp1_In5_2159  );
interpolate1dsharp2_Out1_2298  = RI_interpolate1dsharp2 ( interpolate1dsharp2_In1_2293 , interpolate1dsharp2_In2_2294 , interpolate1dsharp2_In3_2295 , interpolate1dsharp2_In4_2296 , interpolate1dsharp2_In5_2297  );
lte1_Out1_2431  = lte1_In1_2429 >= lte1_In2_2430;
lte2_Out1_2437  = lte2_In1_2435 > lte2_In2_2436;
lte3_Out1_2443  = lte3_In1_2441 > lte3_In2_2442;
gte3_In2_2010  = 500.000000;
interpolate1dsharp2_In3_2295  = 500.000000;
gte2_In2_2004  = 350.000000;
interpolate1dsharp1_In3_2157  = 350.000000;
lte3_In2_2442  = 350.000000;
interpolate1dsharp2_In2_2294  = 350.000000;
gte1_In2_1998  = 120.000000;
interpolate1dsharp0_In3_2019  = 120.000000;
lte2_In2_2436  = 120.000000;
interpolate1dsharp1_In2_2156  = 120.000000;
lte1_In2_2430  = 0.000000;
interpolate1dsharp0_In2_2018  = 0.000000;
gte1_In1_1997  = In1_Out1_1943;
lte2_In1_2435  = In1_Out1_1943;
gte2_In1_2003  = In1_Out1_1943;
lte3_In1_2441  = In1_Out1_1943;
gte3_In1_2009  = In1_Out1_1943;
interpolate1dsharp2_In1_2293  = In1_Out1_1943;
interpolate1dsharp1_In1_2155  = In1_Out1_1943;
lte1_In1_2429  = In1_Out1_1943;
interpolate1dsharp0_In1_2017  = In1_Out1_1943;
branchsharp1_In1_1964  = interpolate1dsharp0_Out1_2022;
interpolate1dsharp2_In5_2297  = 0.300000;
interpolate1dsharp2_In4_2296  = 0.300000;
interpolate1dsharp1_In5_2159  = 0.300000;
interpolate1dsharp1_In4_2158  = 1.000000;
interpolate1dsharp0_In5_2021  = 1.000000;
interpolate1dsharp0_In4_2020  = 1.000000;
branchsharp3_In1_1990  = interpolate1dsharp2_Out1_2298;
branchsharp2_In1_1977  = interpolate1dsharp1_Out1_2160;
branchsharp1_In2_1965  = if lte1_Out1_2431 then 1.000000 else 0.000000;
branchsharp1_In3_1966  = if gte1_Out1_1999 then 1.000000 else 0.000000;
branchsharp2_In2_1978  = if lte2_Out1_2437 then 1.000000 else 0.000000;
branchsharp2_In3_1979  = if gte2_Out1_2005 then 1.000000 else 0.000000;
branchsharp3_In2_1991  = if lte3_Out1_2443 then 1.000000 else 0.000000;
branchsharp3_In3_1992  = if gte3_Out1_2011 then 1.000000 else 0.000000;
Add_In1_1951  = branchsharp1_Out1_1967;
Add_In2_1952  = branchsharp2_Out1_1980;
Add_In3_1953  = branchsharp3_Out1_1993;
Out1_In1_2519  = Add_Out1_1954;
 tel 

node RI_interpolate1dsharp0 ( In1_Out1_2032  : real ; x1_Out1_2042  : real ; x2_Out1_2052  : real ; y1_Out1_2062  : real ; y2_Out1_2072  : real  ) 
   returns ( Out1_In1_2137  : real  ) ;
var Add1_Out1_2082  : real ;
 Add2_Out1_2092  : real ;
 Add3_Out1_2102  : real ;
 Add4_Out1_2112  : real ;
 Divide_Out1_2125  : real ;
 Add1_In1_2080  : real ;
 Add1_In2_2081  : real ;
 Add2_In1_2090  : real ;
 Add2_In2_2091  : real ;
 Add3_In1_2100  : real ;
 Add3_In2_2101  : real ;
 Add4_In1_2110  : real ;
 Add4_In2_2111  : real ;
 Divide_In1_2122  : real ;
 Divide_In2_2123  : real ;
 Divide_In3_2124  : real ;
  
let
Add1_Out1_2082  = - Add1_In1_2080 + Add1_In2_2081;
Add2_Out1_2092  = Add2_In1_2090 + Add2_In2_2091;
Add3_Out1_2102  = - Add3_In1_2100 + Add3_In2_2101;
Add4_Out1_2112  = Add4_In1_2110 + - Add4_In2_2111;
Divide_Out1_2125  = Divide_In1_2122 / Divide_In2_2123 * Divide_In3_2124;
Out1_In1_2137  = Add2_Out1_2092;
Add2_In2_2091  = y1_Out1_2062;
Add3_In1_2100  = y1_Out1_2062;
Add1_In2_2081  = x2_Out1_2052;
Add1_In1_2080  = x1_Out1_2042;
Add4_In2_2111  = x1_Out1_2042;
Divide_In2_2123  = Add1_Out1_2082;
Add3_In2_2101  = y2_Out1_2072;
Divide_In3_2124  = Add3_Out1_2102;
Add2_In1_2090  = Divide_Out1_2125;
Divide_In1_2122  = Add4_Out1_2112;
Add4_In1_2110  = In1_Out1_2032;
 tel 

node RI_interpolate1dsharp1 ( In1_Out1_2170  : real ; x1_Out1_2180  : real ; x2_Out1_2190  : real ; y1_Out1_2200  : real ; y2_Out1_2210  : real  ) 
   returns ( Out1_In1_2275  : real  ) ;
var Add1_Out1_2220  : real ;
 Add2_Out1_2230  : real ;
 Add3_Out1_2240  : real ;
 Add4_Out1_2250  : real ;
 Divide_Out1_2263  : real ;
 Add1_In1_2218  : real ;
 Add1_In2_2219  : real ;
 Add2_In1_2228  : real ;
 Add2_In2_2229  : real ;
 Add3_In1_2238  : real ;
 Add3_In2_2239  : real ;
 Add4_In1_2248  : real ;
 Add4_In2_2249  : real ;
 Divide_In1_2260  : real ;
 Divide_In2_2261  : real ;
 Divide_In3_2262  : real ;
  
let
Add1_Out1_2220  = - Add1_In1_2218 + Add1_In2_2219;
Add2_Out1_2230  = Add2_In1_2228 + Add2_In2_2229;
Add3_Out1_2240  = - Add3_In1_2238 + Add3_In2_2239;
Add4_Out1_2250  = Add4_In1_2248 + - Add4_In2_2249;
Divide_Out1_2263  = Divide_In1_2260 / Divide_In2_2261 * Divide_In3_2262;
Out1_In1_2275  = Add2_Out1_2230;
Add2_In2_2229  = y1_Out1_2200;
Add3_In1_2238  = y1_Out1_2200;
Add1_In2_2219  = x2_Out1_2190;
Add1_In1_2218  = x1_Out1_2180;
Add4_In2_2249  = x1_Out1_2180;
Divide_In2_2261  = Add1_Out1_2220;
Add3_In2_2239  = y2_Out1_2210;
Divide_In3_2262  = Add3_Out1_2240;
Add2_In1_2228  = Divide_Out1_2263;
Divide_In1_2260  = Add4_Out1_2250;
Add4_In1_2248  = In1_Out1_2170;
 tel 

node RI_interpolate1dsharp2 ( In1_Out1_2308  : real ; x1_Out1_2318  : real ; x2_Out1_2328  : real ; y1_Out1_2338  : real ; y2_Out1_2348  : real  ) 
   returns ( Out1_In1_2413  : real  ) ;
var Add1_Out1_2358  : real ;
 Add2_Out1_2368  : real ;
 Add3_Out1_2378  : real ;
 Add4_Out1_2388  : real ;
 Divide_Out1_2401  : real ;
 Add1_In1_2356  : real ;
 Add1_In2_2357  : real ;
 Add2_In1_2366  : real ;
 Add2_In2_2367  : real ;
 Add3_In1_2376  : real ;
 Add3_In2_2377  : real ;
 Add4_In1_2386  : real ;
 Add4_In2_2387  : real ;
 Divide_In1_2398  : real ;
 Divide_In2_2399  : real ;
 Divide_In3_2400  : real ;
  
let
Add1_Out1_2358  = - Add1_In1_2356 + Add1_In2_2357;
Add2_Out1_2368  = Add2_In1_2366 + Add2_In2_2367;
Add3_Out1_2378  = - Add3_In1_2376 + Add3_In2_2377;
Add4_Out1_2388  = Add4_In1_2386 + - Add4_In2_2387;
Divide_Out1_2401  = Divide_In1_2398 / Divide_In2_2399 * Divide_In3_2400;
Out1_In1_2413  = Add2_Out1_2368;
Add2_In2_2367  = y1_Out1_2338;
Add3_In1_2376  = y1_Out1_2338;
Add1_In2_2357  = x2_Out1_2328;
Add1_In1_2356  = x1_Out1_2318;
Add4_In2_2387  = x1_Out1_2318;
Divide_In2_2399  = Add1_Out1_2358;
Add3_In2_2377  = y2_Out1_2348;
Divide_In3_2400  = Add3_Out1_2378;
Add2_In1_2366  = Divide_Out1_2401;
Divide_In1_2398  = Add4_Out1_2388;
Add4_In1_2386  = In1_Out1_2308;
 tel 




node RollInnerLoop ( RollCmd_Out1_1847  : real ; Roll_Out1_1857  : real ; pdeg_Out1_1867  : real ; CAS_Out1_1877  : real  ) 
   returns ( AilCmd_In1_2683  : real  ) ;
var Kphierr_Out1_1886  : real ;
 Product_Out1_1898  : real ;
 Sum_Out1_1916  : real ;
 Sum1_Out1_1926  : real ;
 lookup1d_Out1_1933  : real ;
 asharp1_Out1_2585  : real ;
 an_fbsharp1_Out1_2595  : real ;
 b0sharp1_Out1_2604  : real ;
 b0sharp2_Out1_2613  : real ;
 delaysharp1_Out1_2618  : real ;
 delay_fbsharp1_Out1_2628  : real ;
 out_sum_Out1_2638  : real ;
 samplesharp1_Out1_2647  : real ;
 Kphierr_In1_1885  : real ;
 Product_In1_1896  : real ;
 Product_In2_1897  : real ;
 Sum_In1_1914  : real ;
 Sum_In2_1915  : real ;
 Sum1_In1_1924  : real ;
 Sum1_In2_1925  : real ;
 lookup1d_In1_1932  : real ;
 asharp1_In1_2584  : real ;
 an_fbsharp1_In1_2593  : real ;
 an_fbsharp1_In2_2594  : real ;
 b0sharp1_In1_2603  : real ;
 b0sharp2_In1_2612  : real ;
 delaysharp1_In1_2617  : real ;
 delay_fbsharp1_In1_2626  : real ;
 delay_fbsharp1_In2_2627  : real ;
 out_sum_In1_2636  : real ;
 out_sum_In2_2637  : real ;
 samplesharp1_In1_2646  : real ;
  
let
Kphierr_Out1_1886  = 0.500000 * Kphierr_In1_1885;
Product_Out1_1898  = Product_In1_1896 * Product_In2_1897;
Sum_Out1_1916  = Sum_In1_1914 + - Sum_In2_1915;
Sum1_Out1_1926  = Sum1_In1_1924 + - Sum1_In2_1925;
lookup1d_Out1_1933  = RI_lookup1d ( lookup1d_In1_1932  );
asharp1_Out1_2585  = 0.500000 * asharp1_In1_2584;
an_fbsharp1_Out1_2595  = an_fbsharp1_In1_2593 + - an_fbsharp1_In2_2594;
b0sharp1_Out1_2604  = - 0.006450 * b0sharp1_In1_2603;
b0sharp2_Out1_2613  = 0.006450 * b0sharp2_In1_2612;
delaysharp1_Out1_2618  = 0.000000 -> pre delaysharp1_In1_2617;
delay_fbsharp1_Out1_2628  = delay_fbsharp1_In1_2626 + delay_fbsharp1_In2_2627;
out_sum_Out1_2638  = out_sum_In1_2636 + out_sum_In2_2637;
samplesharp1_Out1_2647  = 0.020000 * samplesharp1_In1_2646;
AilCmd_In1_2683  = Product_Out1_1898;
Product_In2_1897  = lookup1d_Out1_1933;
Product_In1_1896  = Sum1_Out1_1926;
lookup1d_In1_1932  = CAS_Out1_1877;
Sum1_In2_1925  = out_sum_Out1_2638;
Sum1_In1_1924  = Kphierr_Out1_1886;
Sum_In2_1915  = Roll_Out1_1857;
Kphierr_In1_1885  = Sum_Out1_1916;
Sum_In1_1914  = RollCmd_Out1_1847;
b0sharp2_In1_2612  = pdeg_Out1_1867;
an_fbsharp1_In1_2593  = pdeg_Out1_1867;
samplesharp1_In1_2646  = an_fbsharp1_Out1_2595;
delaysharp1_In1_2617  = delay_fbsharp1_Out1_2628;
delay_fbsharp1_In2_2627  = delaysharp1_Out1_2618;
asharp1_In1_2584  = delaysharp1_Out1_2618;
delay_fbsharp1_In1_2626  = samplesharp1_Out1_2647;
an_fbsharp1_In2_2594  = asharp1_Out1_2585;
b0sharp1_In1_2603  = asharp1_Out1_2585;
out_sum_In1_2636  = b0sharp2_Out1_2613;
out_sum_In2_2637  = b0sharp1_Out1_2604;
 tel 

node LatitudinalControl ( AilcmdMan__Out1_19  : real ; cas_ktsf_Out1_29  : real ; phidegf_Out1_39  : real ; psidegf_Out1_49  : real ; psidotdeg_Out1_59  : real ; tas_ktsf_Out1_69  : real ; pbdegf_Out1_79  : real ; beta_degf_Out1_89  : real ; ApHeadEng_Out1_99  : bool ; APHeadCmd_Out1_109  : real ; RollLimit_Out1_119  : real  ) 
   returns ( AilCmd_In1_2767  : real  ) ;
var EngageORzero_Out1_243  : real ;
 Terminator7_In1_2755  : real ;
 EngageORzero_In2_242  : real ;
 ManualOverride_Out1_1806  : real ;
 Heading_Control_Out1_334  : real ;
 Roll_InnerLoop_Out1_1861  : real ;
  
let
EngageORzero_Out1_243  = EngageORzero ( ApHeadEng_Out1_99, EngageORzero_In2_242  );
AilCmd_In1_2767  = - ( ManualOverride_Out1_1806  );
Heading_Control_Out1_334  = HeadingControl ( APHeadCmd_Out1_109 , psidegf_Out1_49 , psidotdeg_Out1_59 , tas_ktsf_Out1_69 , phidegf_Out1_39 , ApHeadEng_Out1_99 , RollLimit_Out1_119  );
ManualOverride_Out1_1806  = ManualOverride ( AilcmdMan__Out1_19 , EngageORzero_Out1_243  );
Roll_InnerLoop_Out1_1861  = RollInnerLoop ( Heading_Control_Out1_334 , phidegf_Out1_39 , pbdegf_Out1_79 , cas_ktsf_Out1_29  );
Terminator7_In1_2755  = beta_degf_Out1_89;
EngageORzero_In2_242  = Roll_InnerLoop_Out1_1861;

 tel  


