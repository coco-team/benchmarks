-- This file has been generated by cocoSim


-- System nodes







-- Entry action for state :Chart_ON
node Chart_ON_en(idChart_Chart_1:int;
	sOff_1:bool;
	sOn_1:bool;
	isInner:bool)

returns (idChart_Chart:int;
	sOff:bool;
	sOn:bool);


var 	idChart_Chart_2:int;
	sOff_2:bool;
	sOn_2:bool;


let



	-- set state as active 
	idChart_Chart_2 
	= 73;
	

	sOff_2 
	= if (not isInner) then false
	 else sOff_1;
	

	sOn_2 
	= if (not isInner) then true
	 else sOn_1;
	

	(idChart_Chart, sOff, sOn) 
	= (idChart_Chart_2, sOff_2, sOn_2);
	

tel





-- Exit action for state :Chart_ON
node Chart_ON_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_1);
	

tel






-- Entry action for state :Chart_OFF
node Chart_OFF_en(idChart_Chart_1:int;
	sOff_1:bool;
	sOn_1:bool;
	isInner:bool)

returns (idChart_Chart:int;
	sOff:bool;
	sOn:bool);


var 	idChart_Chart_2:int;
	sOff_2:bool;
	sOn_2:bool;


let



	-- set state as active 
	idChart_Chart_2 
	= 71;
	

	sOff_2 
	= if (not isInner) then true
	 else sOff_1;
	

	sOn_2 
	= if (not isInner) then false
	 else sOn_1;
	

	(idChart_Chart, sOff, sOn) 
	= (idChart_Chart_2, sOff_2, sOn_2);
	

tel





-- Exit action for state :Chart_OFF
node Chart_OFF_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_1);
	

tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Chart_Chart_node(idChart_Chart_1:int;
	sOff_1:bool;
	sOn_1:bool;
	Set:bool;
	Reset:bool)

returns (idChart_Chart:int;
	sOff:bool;
	sOn:bool);


let

	 automaton chart_chart

	state POINTChart_Chart:
	unless (idChart_Chart_1=0) restart POINT__TO__CHART_OFF_1



	unless (idChart_Chart_1=71) and ( Set ) restart CHART_OFF__TO__CHART_ON_1



	unless (idChart_Chart_1=73) and ( Reset ) restart CHART_ON__TO__CHART_OFF_1



	unless (idChart_Chart_1=71) restart CHART_OFF_IDL

	unless (idChart_Chart_1=73) restart CHART_ON_IDL

	let

		(idChart_Chart, sOff, sOn) 
	= (idChart_Chart_1, sOff_1, sOn_1);
	

	tel



	state POINT__TO__CHART_OFF_1:

	 var 	idChart_Chart_2:int;
	sOff_2:bool;
	sOn_2:bool;
	let

		-- transition trace :
	--POINT__To__Chart_OFF_1
		(idChart_Chart_2, sOff_2, sOn_2) 
	= Chart_OFF_en(idChart_Chart_1, sOff_1, sOn_1, false);
		

	(idChart_Chart, sOff, sOn) 
	=  (idChart_Chart_2, sOff_2, sOn_2);


	tel

	until true restart POINTChart_Chart



	state CHART_OFF__TO__CHART_ON_1:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	sOff_2:bool;
	sOn_2:bool;
	let

		-- transition trace :
	--Chart_OFF__To__Chart_ON_1
		(idChart_Chart_2) 
	= Chart_OFF_ex(idChart_Chart_1, false);
		

		(idChart_Chart_3, sOff_2, sOn_2) 
	= Chart_ON_en(idChart_Chart_2, sOff_1, sOn_1, false);
		

	(idChart_Chart, sOff, sOn) 
	=  (idChart_Chart_3, sOff_2, sOn_2);


	tel

	until true restart POINTChart_Chart



	state CHART_ON__TO__CHART_OFF_1:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	sOff_2:bool;
	sOn_2:bool;
	let

		-- transition trace :
	--Chart_ON__To__Chart_OFF_1
		(idChart_Chart_2) 
	= Chart_ON_ex(idChart_Chart_1, false);
		

		(idChart_Chart_3, sOff_2, sOn_2) 
	= Chart_OFF_en(idChart_Chart_2, sOff_1, sOn_1, false);
		

	(idChart_Chart, sOff, sOn) 
	=  (idChart_Chart_3, sOff_2, sOn_2);


	tel

	until true restart POINTChart_Chart



	state CHART_OFF_IDL:

	 	let

		

	(idChart_Chart, sOff, sOn) 
	= (idChart_Chart_1, sOff_1, sOn_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_ON_IDL:

	 	let

		

	(idChart_Chart, sOff, sOn) 
	= (idChart_Chart_1, sOff_1, sOn_1);
	

	tel

	until true restart POINTChart_Chart



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Switch_Chart(Reset:bool;
	Set:bool)

returns (sOn:bool;
	sOff:bool);


var sOn_1: bool;

	sOff_1: bool;

	idChart_Chart, idChart_Chart_1: int;

	let

	sOn_1 = false -> pre sOn;

	sOff_1 = false -> pre sOff;

	idChart_Chart_1 = 0 -> pre idChart_Chart;

	



	(idChart_Chart, sOff, sOn)
	 = Chart_Chart_node(idChart_Chart_1, sOff_1, sOn_1, Set, Reset);


--unused outputs
	

tel



node Switch (Reset_1_1 : bool; Reset1_1_1 : bool)
returns (sOn_1_1 : bool;
	sOff_2_1 : bool); 
var
	Chart_1_1 : bool; Chart_2_1 : bool;
let 
	(Chart_1_1, Chart_2_1) =  Switch_Chart(Reset_1_1, Reset1_1_1);
	sOn_1_1 = Chart_1_1;
	sOff_2_1 = Chart_2_1;
tel

