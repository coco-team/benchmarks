node __sin(x:real) returns (out:real);
let
out = if (0.0<=x and x<=0.15707963267948965579) then 0.0 + (0.99589273524356136668 * (x - 0.0)) else 
      if (0.15707963267948965579<=x and x<=0.31415926535897931159) then 0.15643446504023086895 + (0.97137055092337043493 * (x - 0.15707963267948965579)) else 
      if (0.31415926535897931159<=x and x<=0.47123889803846896739) then 0.30901699437494739575 + (0.92292999984541579383 * (x - 0.31415926535897931159)) else 
      if (0.47123889803846896739<=x and x<=0.62831853071795862319) then 0.45399049973954674896 + (0.85176384914220870658 * (x - 0.47123889803846896739)) else 
      if (0.62831853071795862319<=x and x<=0.78539816339744827899) then 0.58778525229247313710 + (0.75962444563097375471 * (x - 0.62831853071795862319)) else 
      if (0.78539816339744827899<=x and x<=0.94247779607693793479) then 0.70710678118654746171 + (0.64878056721930821293 * (x - 0.78539816339744827899)) else 
      if (0.94247779607693793479<=x and x<=1.09955742875642759059) then 0.80901699437494734024 + (0.52196155806344746164 * (x - 0.94247779607693793479)) else 
      if (1.09955742875642759059<=x and x<=1.25663706143591724639) then 0.89100652418836778778 + (0.38229012305696996598 * (x - 1.09955742875642759059)) else 
      if (1.25663706143591724639<=x and x<=1.41371669411540690219) then 0.95105651629515353118 + (0.23320543647265201681 * (x - 1.25663706143591724639)) else 
      if (1.41371669411540690219<=x and x<=1.57079632679489655799) then 0.98768834059513777035 + (0.07837845807790584651 * (x - 1.41371669411540690219)) else -1.0;
tel

node sin(x:real) returns (out:real);
let
out = if (0.0<=x and x<=1.57079632679489655799) then __sin(x) else 
      if (1.57079632679489655799<=x and x<=3.14159265358979311599) then __sin(3.14159265358979311599-x) else 
      if (3.14159265358979311599<=x and x<=4.71238898038468967399) then -(__sin(x - 3.14159265358979311599)) else 
      if (4.71238898038468967399<=x and x<=6.28318530717958623199) then -(__sin(6.28318530717958623199 - x))  else -1.0;
tel

node cos(x:real) returns (out:real);
let
out = if (0.0<=x and x<=4.71238898038468967399) then sin(1.57079632679489655799 + x) else 
      if (4.71238898038468967399<=x and x<=6.28318530717958623199) then sin(x - 4.71238898038468967399) else -1.0;
tel

node __asin(x:real) returns (out:real);
let
out = if (0.0<=x and x<=0.15643446504023086895) then 0.0 + (1.00412420395398727102 * (x - 0.0)) else 
      if (0.15643446504023086895<=x and x<=0.30901699437494739575) then 0.15707963267948965579 + (1.02947325204517969865 * (x - 0.15643446504023086895)) else 
      if (0.30901699437494739575<=x and x<=0.45399049973954674896) then 0.31415926535897931159 + (1.08350579151993375859 * (x - 0.30901699437494739575)) else 
      if (0.45399049973954674896<=x and x<=0.58778525229247313710) then 0.47123889803846891188 + (1.17403433006352253542 * (x - 0.45399049973954674896)) else 
      if (0.58778525229247313710<=x and x<=0.70710678118654746171) then 0.62831853071795862319 + (1.31643999314603443728 * (x - 0.58778525229247313710)) else 
      if (0.70710678118654746171<=x and x<=0.80901699437494734024) then 0.78539816339744816797 + (1.54135319478822885308 * (x - 0.70710678118654746171)) else 
      if (0.80901699437494734024<=x and x<=0.89100652418836778778) then 0.94247779607693782377 + (1.91584990226127604984 * (x - 0.80901699437494734024)) else 
      if (0.89100652418836778778<=x and x<=0.95105651629515353118) then 1.09955742875642736855 + (2.61581437679722261790 * (x - 0.89100652418836778778)) else 
      if (0.95105651629515353118<=x and x<=0.98768834059513777035) then 1.25663706143591724639 + (4.28806470005802253808 * (x - 0.95105651629515353118)) else 
      if (0.98768834059513777035<=x and x<=1.0) then 1.41371669411540734628 + (12.75860771598781617797 * (x - 0.98768834059513777035)) else -1.0;
tel

node asin(x:real) returns (out:real);
let
out = if (-1.0<=x and x<=0.0) then -(__asin(-x)) else 
      if (0.0<=x and x<=1.0) then __asin(x) else -1.0;
tel

node acos(x:real) returns (out:real);
let
out = 1.57079632679489655799-asin(x);
tel

node __atan(x:real) returns (out:real);
let
out = if (0.0<=x and x<=0.69813170079773179121) then 0.0 + (0.87300285996325233117 * (x - 0.0)) else 
      if (0.69813170079773179121<=x and x<=1.39626340159546358243) then 0.60947097142742945319 + (0.48674379118670563215 * (x - 0.69813170079773179121)) else 
      if (1.39626340159546358243<=x and x<=2.09439510239319526263) then 0.94928224222134027776 + (0.25218249001124593000 * (x - 1.39626340159546358243)) else 
      if (2.09439510239319526263<=x and x<=2.79252680319092716487) then 1.12533883288429836788 + (0.14551146078247279014 * (x - 2.09439510239319526263)) else 
      if (2.79252680319092716487<=x and x<=3.49065850398865906711) then 1.22692499648592856509 + (0.09291213792183362907 * (x - 2.79252680319092716487)) else 
      if (3.49065850398865906711<=x and x<=4.18879020478639052527) then 1.29178990535805171546 + (0.06397121617235962398 * (x - 3.49065850398865906711)) else 
      if (4.18879020478639052527<=x and x<=4.88692190558412242751) then 1.33645023930656048349 + (0.04655958355337140586 * (x - 4.18879020478639052527)) else 
      if (4.88692190558412242751<=x and x<=5.58505360638185432975) then 1.36895496056110976823 + (0.03533636095655147413 * (x - 4.88692190558412242751)) else 
      if (5.58505360638185432975<=x and x<=6.28318530717958623199) then 1.39362439433570961533 + (0.02770357247626497806 * (x - 5.58505360638185432975)) else 
      if (6.28318530717958623199<=x and x<=1608.49543863797407539095) then 1.41296513650673771778 + (0.00009812026530504006 * (x - 6.28318530717958623199)) else 1.57079632679489655799;
tel

node atan(x:real) returns (out:real);
let
out = if (x>=0.0) then __atan(x) else -(__atan(-x));
tel

node atan2(y:real; x:real) returns (out:real);
let
out = if (x>0.0) then atan(y/x) else 
    if (x<0.0) then 
      if (y>=0.0) then atan(y/x) + 3.14159265358979311599 else atan(y/x) - 3.14159265358979311599 else 
    if (y>0.0) then 1.57079632679489655799 else 
    if (y<0.0) then -1.57079632679489655799 else 0.0;
tel

node __tan(x:real) returns (out:real);
let
out = if (0.0<=x and x<=0.15707963267948965579) then 0.0 + (1.00830666345973063435 * (x - 0.0)) else 
      if (0.15707963267948965579<=x and x<=0.31415926535897931159) then 0.15838444032453627419 + (1.06019636707563424948 * (x - 0.15707963267948965579)) else 
      if (0.31415926535897931159<=x and x<=0.47123889803846896739) then 0.32491969623290628543 + (1.17523672619096353209 * (x - 0.31415926535897931159)) else 
      if (0.47123889803846896739<=x and x<=0.62831853071795862319) then 0.50952544949442879484 + (1.38157363121507126280 * (x - 0.47123889803846896739)) else 
      if (0.62831853071795862319<=x and x<=0.78539816339744827899) then 0.72654252800536089917 + (1.74088433573441325741 * (x - 0.62831853071795862319)) else 
      if (0.78539816339744827899<=x and x<=0.94247779607693793479) then 0.99999999999999988897 + (2.39612172533631406778 * (x - 0.78539816339744827899)) else 
      if (0.94247779607693793479<=x and x<=1.09955742875642759059) then 1.37638192047117313698 + (3.73204708359699921516 * (x - 0.94247779607693793479)) else 
      if (1.09955742875642759059<=x and x<=1.25663706143591724639) then 1.96261050550515037116 + (7.09877539595049622533 * (x - 1.09955742875642759059)) else 
      if (1.25663706143591724639<=x and x<=1.41371669411540690219) then 3.07768353717525311452 + (20.60144859201934508519 * (x - 1.25663706143591724639)) else 
      if (1.41371669411540690219<=x and x<=1.57079632679489655799) then 6.31375151467504114322 + (103967898795117200.0 * (x - 1.41371669411540690219)) else -1.0;
tel

node tan(x:real) returns (out:real);
let
out = if (0.0<=x and x<=1.57079632679489655799) then __tan(x) else 
      if (1.57079632679489655799<=x and x<=3.14159265358979311599) then -(__tan(3.14159265358979311599-x)) else 
      if (3.14159265358979311599<=x and x<=4.71238898038468967399) then __tan(x - 3.14159265358979311599) else 
      if (4.71238898038468967399<=x and x<=6.28318530717958623199) then -(__tan(6.28318530717958623199 - x))  else -1.0;
tel

